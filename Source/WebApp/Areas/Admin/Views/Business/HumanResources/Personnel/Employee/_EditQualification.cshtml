@model Eagle.Model.HR.EmployeeEditModel

<div id="divQualificationContainer">   
    <div class="row">                                                        
        <div class="pull-right detailViewButtoncontainer">
            <div class="btn-toolbar">
                <span class="btn-group">                                                                    
                    <button type="button" data-id="@Model.EmpID" id="btnLoadFormQualification" class="btn addItem">
                    <strong>@Html.Raw(Eagle.Resource.LanguageResource.AddForm)</strong></button>

                    <button type="button" data-id="close" id="btnCloseForm" class="btn closeForm btnLast">
                        <strong>@Html.Raw(Eagle.Resource.LanguageResource.CloseForm)</strong>
                    </button>
                     @Html.HiddenFor(model => model.EmpID)
                </span>                                                                
            </div>
        </div>
        <br /> <br />
        <div id="MainBody" class="main_box">
            <div class="row" id="divEditQualification"></div>
            <div id="QualificationList" class="data_list">  
                @Html.Action("GetListById", "Qualification",  new { EmpID = Model.EmpID })
            </div>
        </div>
    </div>
</div>

<link href="~/Scripts/plugins/tablednd/tablednd_custom.css" rel="stylesheet" />
<script src="~/Scripts/plugins/tablednd/js/jquery.tablednd.js"></script>
<script type="text/javascript"> 
    (function ($) {
        $.createDataBuilder = function (p) {
            var DataMgr = {
                config: {
                    isPostBack: false,
                    async: true,
                    cache: false,
                    processData: false,
                    mimeType: "multipart/form-data",
                    type: 'POST',
                    contentType: "application/json; charset=utf-8",
                    data: '{}',
                    dataType: 'json',
                    baseURL: p.BaseURL,
                    method: "",
                    url: "",
                    ajaxCallMode: 0,
                    isValid: false,
                    mode: 0,
                    key:0,
                    ContainerClientID: p.ContainerClientID                   
                },
                messages:
                {
                    nomenu: "No Data"
                },
                init: function (config) {                  
                    DataMgr.InitializeCotrols();
                    DataMgr.BindEvents();
                },
                ajaxSuccess: function (data) {
                    switch (parseInt(DataMgr.config.ajaxCallMode)) {
                        case 0:
                            DataMgr.BindDataGrid(data);
                        case 1:
                            DataMgr.BindDetails(data);
                            break;
                        case 2:
                            DataMgr.ReloadData(data);
                            break;
                    }
                },
                ajaxFailure: function (jqXHR, textStatus, errorThrown) {
                    handleAjaxErrors(jqXHR, textStatus, errorThrown);
                },
                ajaxCall: function (config) {
                    $.ajax({
                        type: DataMgr.config.type,
                        contentType: DataMgr.config.contentType,
                        cache: DataMgr.config.cache,
                        url: DataMgr.config.url,
                        data: DataMgr.config.data,
                        dataType: DataMgr.config.dataType,
                        success: DataMgr.ajaxSuccess,
                        error: DataMgr.ajaxFailure,
                        async: false
                    });
                },
                ReBindValidator: function (form_id) {
                    //var $form = $("#" + form_id);
                    //$form.unbind();
                    //$form.data("validator", null);
                    //$.validator.unobtrusive.parse(document);
                    ////Re add validation with changes
                    //$form.validate($form.data("unobtrusiveValidation").options);

                    ////$.removeData($form, 'validator');


                    $.validator.methods["date"] = function (value, element) { return true; }

                    $('#' + form_id).validate({
                        rules: {
                            Priority: {
                                required: true,                          
                                greaterThanZero: true
                            }
                        },
                        messages: {
                            Priority: {
                                required: "*",                               
                                greaterThanZero: "@Html.Raw(Eagle.Resource.LanguageResource.GreaterThanZero)"
                            }
                        }                       
                    });
                },
                InitializeCotrols: function () {
                    DataMgr.RemoveQtip();

                    //DataMgr.DragNDrop();                   
                   
                    InvokeMonthPicker();
                    ShowDateTimePicker();
                    handleCheckBox("PayByCompany");

                    //ListCountries ***********************************************************************************************************************
                    BindAutoCompleteSelect2('@Url.Action("DropdownList", "LS_tblCountry")',
                        'selectLSCountryID', '@Html.Raw(Eagle.Resource.LanguageResource.PleaseSelectAnItem)', 'LSCountryID', 'LSCountryName');


                    //ListSchools *************************************************************************************************************************
                    BindAutoCompleteSelect2('@Url.Action("DropdownList", "LS_tblSchool")',
                        'selectLSSchoolID', '@Html.Raw(Eagle.Resource.LanguageResource.PleaseSelectAnItem)', 'LSSchoolID', 'LSSchoolName');

                    //ListQualification ***********************************************************************************************************************
                    BindAutoCompleteSelect2('@Url.Action("DropdownList", "LS_tblQualification")',
                        'selectLSQualificationID', '@Html.Raw(Eagle.Resource.LanguageResource.PleaseSelectAnItem)', 'LSQualificationID', 'LSQualificationName');

                    //ListFaculties ***********************************************************************************************************************
                    BindAutoCompleteSelect2('@Url.Action("DropdownList", "LS_tblFaculty")',
                        'selectLSFacultyID', '@Html.Raw(Eagle.Resource.LanguageResource.PleaseSelectAnItem)', 'LSFacultyID', 'LSFacultyName');

                    //ListMajorSubjects *******************************************************************************************************************
                    BindAutoCompleteSelect2('@Url.Action("DropdownList", "LS_tblMajor")',
                        'selectLSMajors', '@Html.Raw(Eagle.Resource.LanguageResource.PleaseSelectAnItem)', 'MajorID', 'MajorName');

                    //ListTrainingTypes *******************************************************************************************************************
                    BindAutoCompleteSelect2('@Url.Action("DropdownList", "LS_tblTrainingType")',
                        'selectLSTrainingTypeID', '@Html.Raw(Eagle.Resource.LanguageResource.PleaseSelectAnItem)', 'LSTrainingTypeID', 'LSTrainingTypeName');
                    //*************************************************************************************************************************************
                                       
                    $("#modalUpload_Qualification").draggable({ handle: ".modal-header" });
                    $("#modalEdit").draggable({ handle: ".modal-header" });
                },    
                BindEvents: function () {
                    $(document.body).on('keyup', '#QualificationNo', function (event) {
                        DataMgr.ValidateCode();
                    });

                    $(document).on('change', '#TrainingPlace', function () {
                        $(this).find("option[value=" + $(this).val() + "]").attr('selected', true).siblings().attr('selected', false);
                        if ($(this).val() == 2)
                            $("#divCountries").show();
                        else
                            $("#divCountries").hide();
                    });

                    $(document).on("click", "#btnUpload_Qualification", function () {
                        DataMgr.PopulateUploadFormQualification("UPLOAD_DOCUMENT_DIR", "");
                    });
                 

                    $('#Note').keypress(function () {
                        if (this.value.length >= 150)
                            return false;
                    });

                    //Add and update post action
                    $(document).on("click", "#btnLoadFormQualification", function () {
                        var EmpID = $(this).attr("data-id");
                        DataMgr.LoadCreateBriefForm(EmpID);
                        return false;
                    });

                    //close form
                    $(document).on("click", "#btnCloseForm", function () {
                        $('#divEditQualification').html('');
                        return false;
                    });

                    //Add and update post action
                    $(document).on("click", "#btnAddQualification", function () {
                        if (!$("#createform").valid()) { // Not Valid
                            return false;
                        } else {
                            DataMgr.RemoveQtip();                            
                            DataMgr.AddData();
                        }
                    });

                    $(document).on("click", "#btnEditQualification", function () {
                        if (!$("#editform").valid()) { // Not Valid
                            return false;
                        } else {
                            DataMgr.RemoveQtip();
                            //Update data                           
                            DataMgr.UpdateData();
                        }
                    });

                    // Click edit (get)
                    $(document).on("click", ".editItem_Qualification", function () {
                        var ID = $(this).data('id');  // ID cua dong du lieu                        
                        DataMgr.GetQualificationDetails(ID);                       
                        return false;
                    });

                    // Click delete (get)
                    $(document).on("click", ".deleteItem_Qualification", function (e) {
                        var ID = $(this).data('id');  // ID cua dong du lieu
                       
                        bootbox.confirm("@Html.Raw(Eagle.Resource.LanguageResource.DoYouWantToContinue)", function (result) {
                            if (result) {
                                DataMgr.DeleteData(ID);
                                return false;
                            }
                        });

                       
                    });

                    // Reset form
                    $(document).on("click", "#btnReset", function () {
                        DataMgr.ResetControls();
                    });
                },
                RemoveQtip: function () {
                    $('span.error:first').qtip("hide");
                    $(".qtip").remove();
                },
                ConvertFormToJSON: function (form) {
                    var array = $("#" + form).serializeArray();
                    var json = {};
                    $.each(array, function () {
                        json[this.name] = this.value || '';
                    });
                    return JSON.stringify(json);
                },
                GenerateCode: function () {
                    $.getJSON('@Url.Action("GenerateCode", "Qualification")',
                         function (data) {
                             $("#QualificationNo").val(data);
                         });
                },
                ValidateCode: function () {
                    var mode = DataMgr.config.mode;
                    if (mode == 0) {
                        var params = {};
                        params.Code = $('#QualificationNo').val();
                        $.getJSON('@Url.Action("ValidateCode", "Qualification")', params,
                             function (data) {
                                 if (data == true)
                                     ShowToolTip('QualificationNo', '@Html.Raw(Eagle.Resource.LanguageResource.InValid)');
                                 else
                                     CloseToolTip('QualificationNo');
                             });
                    }
                },
                PopulateUploadFormQualification: function (FolderKey, FileIds) {
                    var ItemId = $('#QualificationID').val();
                    var ItemTag = "Qualification";
                    var data = { "ItemId": ItemId, "ItemTag": ItemTag, "FolderKey": FolderKey, "FileIds": FileIds, };
                    $.ajax({
                        type: "GET",
                        dataType: 'html',
                        // url: '/Admin/FileManager/PopulateUploadFileListForm/',
                        url: '/Admin/FileManager/PopulateUploadMultipleFileForm/',
                        data: data,
                        success: function (data, statusCode, xhr) {
                            if (data.message != 'timeout') {
                                $('#divUpload_Qualification').html(data);
                                $('#modalUpload_Qualification').modal('show');
                               @* showContentPopUp('@Html.Raw(Eagle.Resource.LanguageResource.Upload)', data);*@
                            } else {
                                window.location.reload();
                            }
                        }, error: function (jqXHR, textStatus, errorThrown) {
                            handleAjaxErrors(jqXHR, textStatus, errorThrown);
                        }
                    });
                },               
                LoadCreateBriefForm: function (EmpID) {
                    $('body').addClass('loading');
                    var data = { "EmpID": EmpID };
                    $.ajax({
                        type: "GET",
                        url: '/Admin/Qualification/CreateBriefForm/',
                        data: data,
                        success: function (data, statusCode, xhr) {
                            if (data.message != 'timeout') {
                                $('#divEditQualification').html(data);
                                DataMgr.InitializeCotrols();
                                $('body').removeClass('loading');
                            }else
                                window.location.reload();
                        }, error: function (jqXHR, textStatus, errorThrown) {
                            handleAjaxErrors(jqXHR, textStatus, errorThrown);
                        }
                    });
                },
                GetList: function () {
                    $('#QualificationList').html('');
                    var EmpID = $('input:hidden[name="EmpID"]').val();
                    var data = { "EmpID": EmpID };
                    this.config.method = "GetListById";
                    this.config.data = data;
                    this.config.type = "GET";
                    this.config.dataType = "html";
                    this.config.url = DataMgr.config.baseURL + this.config.method;
                    this.config.ajaxCallMode = 0;
                    this.ajaxCall(this.config);
                },
                BindDataGrid: function (data) {
                    $('#divEditQualification').html('');
                    $('#QualificationList').html(data);
                },
                DeleteData: function (ID) {
                    DataMgr.config.mode = 2;

                    this.config.method = "Delete";
                    this.config.type = "POST";
                    this.config.dataType = "json";
                    this.config.data = JSON.stringify({ "id": ID });
                    this.config.url = DataMgr.config.baseURL + this.config.method + "/" + ID;
                    this.config.ajaxCallMode = 2;
                    this.ajaxCall(this.config);
                },
                AddData: function () {
                    var data = DataMgr.ConvertFormToJSON("createform");
                    this.config.method = "Insert";
                    this.config.type = "POST";
                    this.config.dataType = "json";
                    this.config.mimeType = "multipart/form-data";
                    this.config.processData = false;
                    this.config.async = true;
                    this.config.data = data;
                    this.config.url = DataMgr.config.baseURL + this.config.method;
                    this.config.ajaxCallMode = 2;
                    this.ajaxCall(this.config);
                },
                UpdateData: function () {
                    var data = DataMgr.ConvertFormToJSON("editform");
                    this.config.method = "Update";
                    this.config.type = "POST";
                    this.config.dataType = "json";
                    this.config.data = data;
                    this.config.url = DataMgr.config.baseURL + this.config.method;
                    this.config.ajaxCallMode = 2;
                    this.ajaxCall(this.config);
                },
                GetQualificationDetails: function (id) {
                    DataMgr.config.mode = 1;
                    DataMgr.config.key = id;

                    var data = { "id": id };
                    this.config.method = "EditBriefForm";
                    this.config.data = data;
                    this.config.type = "GET";
                    this.config.dataType = "html";
                    this.config.url = this.config.baseURL + this.config.method;
                    this.config.ajaxCallMode = 1;
                    this.ajaxCall(this.config);
                },
                BindDetails: function (data) {
                    $('#divEditQualification').html(data);
                    DataMgr.InitializeCotrols();
                }, 
                ReloadData: function (data) {
                    if (data != null && data != '' && data != undefined) {
                        var mode = DataMgr.config.mode;
                        var titleSuccess = "", titleFailure = "", titleAjaxError = "";
                        titleAjaxError = "@Eagle.Resource.LanguageResource.Error";
                        if (mode == 0) {
                            titleSuccess = "@Eagle.Resource.LanguageResource.CreateSuccess";
                            titleFailure = "@Eagle.Resource.LanguageResource.CreateFailure";
                        }
                        else if (mode == 1) {
                            titleSuccess = "@Eagle.Resource.LanguageResource.UpdateSuccess";
                            titleFailure = "@Eagle.Resource.LanguageResource.UpdateFailure";
                        }
                        else if (mode == 2) {
                            titleSuccess = "@Eagle.Resource.LanguageResource.DeleteSuccess";
                            titleFailure = "@Eagle.Resource.LanguageResource.DeleteFailure";
                        }
                        else {
                            titleSuccess = "@Eagle.Resource.LanguageResource.UpdateSuccess";
                            titleFailure = "@Eagle.Resource.LanguageResource.UpdateFailure";
                        }

                        var result = JSON.parse(data);
                        if (result.flag == 'true') {
                            //Reload grid after success
                            showMessageWithTitle(titleSuccess, result.message, "success", 3000);                            
                            DataMgr.GetList();
                            $('#divEditQualification').html('');
                        } else {
                            showMessageWithTitle(titleFailure, result.message, "error");
                            hideMessageWithTitle(20000);
                        }
                    }
                 },
                ResetControls: function () {
                    var mode = DataMgr.config.mode;                   
                    if (mode == 0) {
                        var validateObj = $('#myform');
                        validateObj.find('input:text, input:password, input:file, select, textarea').not('.ignored').val('');
                        validateObj.find('input:radio, input:checkbox').removeAttr('checked').removeAttr('selected');
                        validateObj.find('input[type="number"]').val(0);
                        validateObj.find('select').find('option:first').attr('selected', true).siblings().attr('selected', false);
                        validateObj.find("[data-valmsg-summary=true]").removeClass("validation-summary-errors").addClass("validation-summary-valid").find("ul").empty();
                        validateObj.find("[data-valmsg-replace]").removeClass("field-validation-error").addClass("field-validation-valid").empty();
                        DataMgr.InitializeCotrols();
                    } else {                       
                        var key = DataMgr.config.key;
                        DataMgr.GetQualificationDetails(key);
                    }
                },               
                //UpdateListOrder: function (id, listorder) {
                //    this.config.method = "UpdateListOrder";
                //    this.config.type = "POST";
                //    this.config.dataType = "json";
                //    this.config.data = JSON.stringify({ "id": id, "listorder": listorder });
                //    this.config.url = DataMgr.config.baseURL + this.config.method;
                //    this.config.ajaxCallMode = 2;
                //    this.ajaxCall(this.config);
                //},
                //DragNDrop: function () {
                //    // Initialise the second table specifying a dragClass and an onDrop function that will display an alert
                //    $("#dataTable").tableDnD({
                //        onDragClass: "myDragClass",
                //        onDrop: function (table, row) {
                //            var rows = table.tBodies[0].rows;
                //            var debugStr = "Row dropped was " + row.id + ". New order: ";
                //            for (var i = 0; i < rows.length; i++) {
                //                DataMgr.UpdateListOrder(rows[i].id, i + 1);
                //                debugStr += rows[i].id + " ";
                //            }
                //            //$("#debugArea").html(debugStr);
                //        },
                //        //onDragStart: function (table, row) {
                //           // $("#debugArea").html("Started dragging row " + row.id);
                //        //}
                //    });

                //    $("#dataTable tr").hover(function () {
                //        $(this.cells[0]).addClass('showDragHandle');
                //    }, function () {
                //        $(this.cells[0]).removeClass('showDragHandle');
                //    });

                //    // Setup the "Up" links
                //    $(".rowUp").click(function () {
                //        var row = $(this).closest("tr");
                //        var table = row.parents('table');

                //        // Get the previous element in the DOM
                //        var previous = row.prev();

                //        // Check to see if it is a row
                //        if (previous.is("tr")) {
                //            // Move row above previous
                //            row.detach();
                //            previous.before(row);

                //            // draw the user's attention to it
                //            row.fadeOut();
                //            row.fadeIn();
                //        }
                //        // else - already at the top
                //        GetSortableOrderingTable(table.attr("id"), row.attr("id"));

                //    });

                //    // Setup the "Up" links
                //    $(".rowDown").click(function () {
                //        var row = $(this).closest("tr");
                //        var table = row.parents('table');

                //        // Get the previous element in the DOM
                //        var next = row.next();

                //        // Check to see if it is a row
                //        if (next.is("tr")) {
                //            // Move row above previous
                //            row.detach();
                //            next.after(row);

                //            // draw the user's attention to it
                //            row.fadeOut();
                //            row.fadeIn();
                //        }
                //        // else - already at the bottom   	

                //        DataMgr.GetSortableOrderingTable(table.attr("id"), row.attr("id"));
                //    });
                //},
                //GetSortableOrderingTable: function (selected_table, selected_row) {
                //    var table = $('#' + selected_table)[0];
                //    var row = $('#' + selected_row)[0];
                //    var rows = table.tBodies[0].rows;

                //    var debugStr = "Row dropped was " + row.id + ". New order: ";

                //    for (var i = 0; i < rows.length; i++) {
                //        DataMgr.UpdateListOrder(rows[i].id, i + 1);
                //        debugStr += rows[i].id + " ";
                //    }
                //   // $("#debugArea").html(debugStr);
                //},
                //SortList: function () {
                //    $(".sortable").sortable({
                //        placeholder: "ui-state-highlight",
                //        helper: 'clone',
                //        sort: function (e, ui) {
                //            $(ui.placeholder).html(Number($(".sortable > li:visible").index(ui.placeholder)) + 1);
                //        },
                //        update: function (event, ui) {
                //            var lis = $(this).children('li');
                //            lis.each(function () {
                //                var lis = $(this);
                //                var newVal = $(this).index() + 1;
                //                $(this).find('div.sortable-number').html(newVal);
                //            });

                //            //  var ordering = $(this).sortable('toArray').toString();
                //            var ordering = $(".sortable").sortable('serialize');
                //           // alert(ordering);
                //        }
                //    });
                //    $(".sortable").disableSelection();
                //    //$(".sortable li").hover(function () {
                //    //    $(this).css('border', '3px solid black');
                //    //});
                //}
            };
            DataMgr.init();
        }

        var Controller = 'Qualification';
        var BaseURL = areas + "/" + Controller + "/";
        var base_settings = {
            ContainerClientID: "MainBody",
            BaseURL: BaseURL
        };
        $.createDataBuilder(base_settings);

    })(jQuery);
</script>