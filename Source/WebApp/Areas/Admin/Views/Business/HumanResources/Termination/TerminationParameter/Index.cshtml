@{
    ViewBag.Title = Eagle.Resource.LanguageResource.BasicConfiguration;
    Layout = Request.IsAjaxRequest() ? null : Eagle.Repository.UI.Layout.LayoutType.FullMainLayout;
}
@section ContentSection
{
<div id="MainBody" class="main_box">
    @Html.Partial("../Business/HumanResources/Termination/TerminationParameter/_Reset")
</div>
    }
@Html.Action("jqueryval", "Common", null)
<script type="text/javascript">
    (function ($) {
        $.createDataBuilder = function (p) {
            var DataMgr = {
                config: {
                    isPostBack: false,
                    async: true,
                    cache: false,
                    processData: false,
                    mimeType: "multipart/form-data",
                    type: 'POST',
                    contentType: "application/json; charset=utf-8",
                    data: '{}',
                    dataType: 'json',
                    baseURL: p.BaseURL,
                    method: "",
                    url: "",
                    ajaxCallMode: 0,
                    isValid: false,
                    mode: 0,
                    key: 0,
                    ContainerClientID: p.ContainerClientID
                },
                messages:
                {
                    nomenu: "No Data"
                },
                init: function (config) {
                    DataMgr.InitializeCotrols();
                    DataMgr.BindEvents();
                },
                ajaxSuccess: function (data) {
                    switch (parseInt(DataMgr.config.ajaxCallMode)) {
                        //case 0:
                        //    DataMgr.GetList();
                        case 1:
                            DataMgr.ReloadData(data);
                            break;
                    }
                },
                ajaxFailure: function (jqXHR, textStatus, errorThrown) {
                    handleAjaxErrors(jqXHR, textStatus, errorThrown);
                },
                ajaxCall: function (config) {
                    $.ajax({
                        type: DataMgr.config.type,
                        contentType: DataMgr.config.contentType,
                        cache: DataMgr.config.cache,
                        url: DataMgr.config.url,
                        data: DataMgr.config.data,
                        dataType: DataMgr.config.dataType,
                        success: DataMgr.ajaxSuccess,
                        error: DataMgr.ajaxFailure,
                        async: false
                    });
                },
                InitializeCotrols: function () {
                    DataMgr.RemoveQtip();

                    var mode = $("input:hidden[name=Mode]").val();
                    if (mode == 1)
                    {
                        $("#btnAdd").hide();
                        $("#btnEdit").show();
                    }
                    else {
                        $("#btnAdd").show();
                        $("#btnEdit").hide();
                    }
                    //Xu ly collapse div with checkbox Decision
                   // DataMgr.HandleCheckBoxEvent("Decision", false);
                    $("#modalEdit").draggable({ handle: ".modal-header" });
                },
                RemoveQtip: function () {
                    $('span.error:first').qtip("hide");
                    $(".qtip").remove();
                },
                BindEvents: function () {
                    $(document).on('change', '#IsPaidForAnnualLeave', function () {
                        $(this).find("option[value=" + $(this).val() + "]").attr('selected', true).siblings().attr('selected', false);
                    });
                    $(document).on('change', '#IsPaidForMandatoryTrainingFee', function () {
                        $(this).find("option[value=" + $(this).val() + "]").attr('selected', true).siblings().attr('selected', false);
                    });

                    $(document).on('change', '#IsManipulatedLeaveDayRemains', function () {
                        $(this).find("option[value=" + $(this).val() + "]").attr('selected', true).siblings().attr('selected', false);
                    });

                    $(document).on('change', '#IsManipulatedForPaidLeave', function () {
                        $(this).find("option[value=" + $(this).val() + "]").attr('selected', true).siblings().attr('selected', false);
                    });

                    $(document).on('change', '#IsDeletedAfterTerminationSettlement', function () {
                        $(this).find("option[value=" + $(this).val() + "]").attr('selected', true).siblings().attr('selected', false);
                    });

                    $(document).on('change', '#IsAutomatedDecisionNo', function () {
                        $(this).find("option[value=" + $(this).val() + "]").attr('selected', true).siblings().attr('selected', false);
                    });

                    //Add and update post action
                    $(document).on("click", "#btnAdd", function () {
                        if (!$("#myform").valid()) { // Not Valid
                            return false;
                        } else {
                            DataMgr.RemoveQtip();
                            var data = DataMgr.ConvertFormToJSON("myform");
                            DataMgr.AddData(data);
                        }
                    });

                    $(document).on("click", "#btnEdit", function () {
                        if (!$("#myform").valid()) { // Not Valid
                            return false;
                        } else {
                            DataMgr.RemoveQtip();
                            var data = DataMgr.ConvertFormToJSON("myform");
                            DataMgr.UpdateData(data);
                        }
                    });

                    // Reset form
                    $(document).on("click", "#btnReset", function () {
                        DataMgr.ResetControls();
                    });
                },
                ConvertFormToJSON: function (form) {
                    var array = $("#" + form).serializeArray();
                    var json = {};
                    $.each(array, function () {
                        json[this.name] = this.value || '';
                    });
                    return JSON.stringify(json);
                },
                HandleCheckBoxEvent: function (checkFieldId, chkStatus) {
                    var name = $("#" + checkFieldId).attr("name");
                    var checkBoxSelector = $("input:checkbox[name=" + name + "]");
                    var hiddenSelector = $("input:hidden[name=" + name + "]");

                    checkBoxSelector.attr("checked", chkStatus);
                    checkBoxSelector.val(chkStatus);
                    hiddenSelector.val(chkStatus);

                    checkBoxSelector.click(function () {
                        var checkBoxStatus = $(this).is(":checked");
                        checkBoxSelector.attr("checked", checkBoxStatus);
                        checkBoxSelector.val(checkBoxStatus);
                        hiddenSelector.val(checkBoxStatus);
                    });
                },
                AddData: function (data) {
                    this.config.method = "Create";
                    this.config.data = data;
                    this.config.url = DataMgr.config.baseURL + this.config.method;
                    this.config.ajaxCallMode = 1;
                    this.ajaxCall(this.config);
                },
                UpdateData: function (data) {
                    this.config.method = "Edit";
                    this.config.type = "POST";
                    this.config.dataType = "json";
                    this.config.data = data;
                    this.config.url = DataMgr.config.baseURL + this.config.method;
                    this.config.ajaxCallMode = 1;
                    this.ajaxCall(this.config);
                },
                ReloadData: function (data) {
                    var mode = $("input:hidden[name=Mode]").val();                 
                    var titleSuccess = "", titleFailure = "", titleAjaxError = "";
                    titleAjaxError = "@Eagle.Resource.LanguageResource.Error";
                    if (mode == 0) {
                        titleSuccess = "@Eagle.Resource.LanguageResource.CreateSuccess";
                        titleFailure = "@Eagle.Resource.LanguageResource.CreateFailure";
                    }
                    else {
                        titleSuccess = "@Eagle.Resource.LanguageResource.UpdateSuccess";
                        titleFailure = "@Eagle.Resource.LanguageResource.UpdateFailure";
                    }

                    var result = JSON.parse(data);
                    // var result = $.parseJSON(data);
                    if (result.flag == 'true') {
                        //Reload page after success
                        this.config.method = "Index";
                        $.ajax({
                            type: "GET",
                            url: DataMgr.config.baseURL + this.config.method,
                            statusCode: {
                                401: function () {
                                    window.location.reload();
                                },
                                403: function () {
                                    window.location.reload();
                                },
                                590: function () {
                                    window.location.reload();
                                }
                            },
                            success: function (data, statusCode, xhr) {
                                //DataMgr.ResetControls();
                               // $('#' + DataMgr.config.ContainerClientID).html(data);
                                DataMgr.InitializeCotrols();
                                showMessageWithTitle(titleSuccess, result.message, "success");
                                hideMessageWithTitle(20000);
                            }, error: function (jqXHR, textStatus, errorThrown) {
                                handleAjaxErrors(jqXHR, textStatus, errorThrown);
                            }
                        });
                    } else {
                        showMessageWithTitle(titleFailure, result.message, "error");
                        hideMessageWithTitle(20000);
                    }
                },
                ResetControls: function () {
                    //var mode = DataMgr.config.mode;
                    //if (mode == 0) {
                        var validateObj = $('#myform');
                        validateObj.find('input:text, input:password, input:file, select, textarea').not('.ignored').val('');
                        validateObj.find('input:radio, input:checkbox').removeAttr('checked').removeAttr('selected');
                        validateObj.find('input[type="number"]').val(0);
                        validateObj.find('select').find('option:first').attr('selected', true).siblings().attr('selected', false);
                        validateObj.find("[data-valmsg-summary=true]").removeClass("validation-summary-errors").addClass("validation-summary-valid").find("ul").empty();
                        validateObj.find("[data-valmsg-replace]").removeClass("field-validation-error").addClass("field-validation-valid").empty();
                        //this.config.method = "Index";
                        //$.ajax({
                        //    type: "GET",
                        //    url: DataMgr.config.baseURL + this.config.method,
                        //    success: function (data) {
                        //        $('#' + DataMgr.config.ContainerClientID).html(data);
                        //    }
                        //});

                        DataMgr.InitializeCotrols();
                    //} else {
                    //    var key = DataMgr.config.key;
                    //    DataMgr.GetDetails(key);
                    //}
                },
            };
            DataMgr.init();
        }

        var Controller = 'TerminationParameter';
        var BaseURL = areas + "/" + Controller + "/";
        var base_settings = {
            ContainerClientID: "MainBody",
            BaseURL: BaseURL
        };
        $.createDataBuilder(base_settings);
    })(jQuery);
</script>