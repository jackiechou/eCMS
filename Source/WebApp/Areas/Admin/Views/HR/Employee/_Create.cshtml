@{
    Layout = Request.IsAjaxRequest() ? null : Eagle.Repository.UI.Layout.LayoutType.FullMainLayout;
    ViewBag.Title = Html.Raw(Eagle.Resource.LanguageResource.AddNewEmployee);
}
@model Eagle.Model.HR.EmployeeEditModel
@section ContentSection
{
<div id="MainBody">
    @using (Html.BeginForm("Insert", "Employee", FormMethod.Post, new { enctype = "multipart/form-data", id = "myform", name = "myform", autocomplete = "off", @class = "form-horizontal", role = "form" }))
    {

        <div class="form-group">
            <div id="alertMessageBox" aria-hidden="true" aria-labelledby="alertMessage" role="dialog" class="modal hide fade">
                <div class="modal-body">
                    <div id="alertMessage">
                        @if (ViewBag.DisplayErrorMessage == true)
                        {
                            <div class="@ViewBag.CssClass">
                                <a href="#" class="close" data-dismiss="alert">&times;</a>
                                <strong>@ViewBag.SortMessage !</strong> @ViewBag.Message
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        
        <div class="form-group">
            <div id="collapsedContent">
            <div class="row">
                @*<div class="lead">Please fill in the blanks with requirement which is marked by asterisk</div>*@
                <ul class="nav nav-tabs" id="myTab">
                    <li id="tab-1" class="active"><a href="#pane-1" data-toggle="tab">@Eagle.Resource.LanguageResource.GeneralInfo</a></li>
                    <li id="tab-2"><a href="#pane-2" data-toggle="tab">@Eagle.Resource.LanguageResource.Others</a></li>
                </ul>

                <div id="myTabContent" class="tab-content responsive">
                    @*---------------------------------------------General--------------------------------------------*@
                    <div class="tab-pane  fade in active" id="pane-1">
                        <div class="accordion" id="accordion1">
                            <div class="accordion-group">
                                <!-- Element Group Heading -->
                                <div class="accordion-heading toolbar">
                                    <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion1" href="#collapse1">
                                        <span class="pull-right"><i class="icon-chevron-up icon-white"></i></span>
                                        <h5>@Eagle.Resource.LanguageResource.Basics </h5>
                                    </a>
                                </div>
                                <!-- Elements -->
                                <div id="collapse1" class="accordion-body collapse in">
                                    <div class="accordion-inner">
                                        <div class="accordion-content">
                                            <div>
                                                <h6>@Eagle.Resource.LanguageResource.Basics</h6>
                                            </div>
                                            <hr />
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.RequiredLabelFor(model => model.EmpCode)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBoxFor(model => model.EmpCode, new { @class = "span9" })
                                                    @Html.ValidationMessageFor(model => model.EmpCode)
                                                    <span class="add-on btn" id="btnReloadCode"><i class="icon-refresh"></i></span>
                                                </div>
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.UserMachineID)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBoxFor(model => model.UserMachineID, null, new { @class = "span12", autocomplete = "off" })
                                                </div>
                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.RequiredLabelFor(model => model.FirstName)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBoxFor(model => model.FirstName, null, new { @class = "span12", autocomplete = "off" })
                                                    @Html.ValidationMessageFor(model => model.FirstName)
                                                </div>

                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.FileId)
                                                </div>
                                                <div class="col-md-4">
                                                    <div class="col-md-12">
                                                        <div id="ImagePreviewBox" style="float: left; overflow: hidden; display: none" class="col-md-4">
                                                            <span>
                                                                <img width="70" height="70" title="no-image" src="~/Content/Admin/images/no-image.png" class="thumb">
                                                            </span>
                                                        </div>
                                                        <div style="float: left" class="col-md-8">
                                                            @Html.TextBox("FileUpload", null, new { id = "FileUpload", type = "file" })
                                                            @Html.Hidden("FileId")
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.RequiredLabelFor(model => model.LastName)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBoxFor(model => model.LastName, null, new { @class = "span12", autocomplete = "off" })
                                                    @Html.ValidationMessageFor(model => model.LastName)
                                                </div>
                                                <div class="col-md-2">
                                                    @Html.RequiredLabelFor(model => model.DOB)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.CheckBox("IsYOB", false, new { @style = "float:left;margin:5px;" })
                                                    @Html.Label(@Eagle.Resource.LanguageResource.IsYOB, new { @style = "float:left;padding-right:10px;" })
                                                    <div id="dpDOB">
                                                        @Html.DateTimePickerFor(model => model.DOB)
                                                        @Html.ValidationMessageFor(model => model.DOB)
                                                    </div>
                                                    <div id="dpYOB" style="display: none">
                                                        @Html.TextBoxFor(model => model.YOB, new { @class = "span3" })
                                                    </div>
                                                </div>
                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.RequiredLabelFor(model => model.Gender)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.DropDownList("Gender", null, new { @class = "span7" })
                                                    @Html.ValidationMessageFor(model => model.Gender)
                                                </div>
                                                <div class="col-md-2">
                                                    @Html.LabelFor(m => m.LSMaritalID)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.DropDownList("LSMaritalID", null, new { @name = "LSMaritalID", @class = "span7" })
                                                </div>
                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.RequiredLabelFor(model => model.Email)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("Email", null, new { @class = "span12", @name = "Email", @type = "email", @required = false, pattern = "[^ @]*@[^ @]*", autocomplete = "off" })
                                                    @Html.ValidationMessageFor(model => model.Email)
                                                </div>
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.BloodType)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.DropDownListFor(model => model.BloodType, null, new { @class = "span12" })
                                                </div>
                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.RequiredLabelFor(model => model.JoinDate)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.DateTimePickerFor(model => model.JoinDate, null, System.DateTime.Now.AddDays(-1).ToString("dd/MM/yyyy"))
                                                    @Html.ValidationMessageFor(model => model.JoinDate)
                                                </div>
                                                <div class="col-md-2">
                                                    <label>@Eagle.Resource.LanguageResource.OfficialSignedDate</label>
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.DatepickerFor(model => model.StartDate)
                                                    @Html.ValidationMessageFor(model => model.StartDate)
                                                </div>
                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.Telephone)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("Telephone", null, new { @class = "span12", @name = "Telephone", @type = "tel", autocomplete = "off" })
                                                </div>
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.Mobile)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("Mobile", null, new { @class = "span12", @name = "Mobile", autocomplete = "off" })
                                                </div>

                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.IDNo)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBoxFor(model => model.IDNo, new { @name = "IDNo", @class = "span12", autocomplete = "off" })
                                                </div>
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.IDIssuedDate)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.DateTimePickerFor(model => model.IDIssuedDate)
                                                </div>
                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.IDIssuedPlace)
                                                </div>
                                                <div class="col-md-4">
                                                    @*@Html.DropDownListFor(model => model.IDIssuedPlace, null, new { @name = "IDIssuedPlace", @class = "span7" })*@
                                                    @Html.TextBox("selectIDIssuedPlace", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.IDIssuedPlaceName)
                                                    @Html.HiddenFor(model => model.IDIssuedPlace)
                                                </div>
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.LSNationalityID)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("selectLSNationalityID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.LSNationalityID)
                                                    @Html.Hidden("LSNationalityName")
                                                </div>
                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.LSEthnicID)
                                                </div>
                                                <div class="col-md-4">
                                                    @*@Html.DropDownList("LSEthnicID", null, new { @class = "span7" })*@
                                                    @Html.TextBox("selectLSEthnicID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.LSEthnicID)
                                                    @Html.Hidden("LSEthnicName")
                                                </div>

                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.LSReligionID)
                                                </div>
                                                <div class="col-md-4">
                                                    @*@Html.DropDownList("LSReligionID", null, new { @name = "LSReligionID", @class = "span7" })*@
                                                    @Html.TextBox("selectLSReligionID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.LSReligionID)
                                                    @Html.Hidden("LSReligionName")
                                                </div>

                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.LSEducationID)
                                                </div>
                                                <div class="col-md-4">
                                                    @*@Html.DropDownList("LSEducationID", null, new { @name = "LSEducationID", @class = "span12" })*@
                                                    @Html.TextBox("selectLSEducationID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.LSEducationID)
                                                    @Html.Hidden("LSEducationName")
                                                </div>
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.LSMajorID)
                                                </div>
                                                <div class="col-md-4">
                                                    @*@Html.DropDownList("LSMajorID", null, new { @name = "LSMajorID", @class = "span12" })*@
                                                    @Html.TextBox("selectLSMajorID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.LSMajorID)
                                                    @Html.Hidden("LSMajorName")
                                                </div>
                                            </div>
                                            <!--end row-->
                                            <!-- CompanyInfo ----------------------------------------------------------------------------------->
                                            <div>
                                                <h6>@Eagle.Resource.LanguageResource.CompanyUnit</h6>
                                            </div>
                                            <hr />
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.RequiredLabelFor(model => model.Department)
                                                </div>
                                                <div class="col-md-4">
                                                    @*<select id="selectCompanies" name="selectCompanies" class="col-md-12"></select>   *@
                                                    <input id="LSCompanyID" name="LSCompanyID" type="text" value="0" class="easyui-combotree span2" />
                                                    @Html.ValidationMessageFor(model => model.LSCompanyID)
                                                </div>
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.LSPositionID)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.DropDownList("LSPositionID", null, new { @class = "span12" })
                                                </div>
                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    <label>@Eagle.Resource.LanguageResource.LSLocationID</label>
                                                </div>
                                                <div class="col-md-4">
                                                    @*@Html.DropDownList("LSLocationID", null, new { @class = "span12" })*@
                                                    @Html.TextBox("selectLSLocationID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.LSLocationID)
                                                    @Html.Hidden("LSLocationName")
                                                    <input type="button" id="btnReload_Location" style="display: none" data-isclosed="false" data-id="null" value="Reload">
                                                </div>

                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.LineManagerID)
                                                </div>
                                                <div class="col-md-4">
                                                    @*@Html.DropDownList("LineManagerID", null, new { @class = "span12" })*@
                                                    @Html.TextBox("selectManager", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.LineManagerID)
                                                    @Html.Hidden("LineManagerName")
                                                </div>
                                            </div>
                                            <!--end row-->
                                            <!-- BornAddress ----------------------------------------------------------------------------------->
                                            <div>
                                                <h6>@Eagle.Resource.LanguageResource.BornAddress</h6>
                                            </div>
                                            <hr />
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.BornLSCountryID)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("selectBornLSCountryID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.BornLSCountryID)
                                                    @Html.Hidden("BornLSCountryName")
                                                </div>
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.BornLSProvinceID)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("selectBornLSProvinceID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.BornLSProvinceID)
                                                    @Html.Hidden("BornLSProvinceName")
                                                </div>
                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.BornLSDistrictID)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("selectBornLSDistrictID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.BornLSDistrictID)
                                                    @Html.Hidden("BornLSDistrictName")
                                                </div>

                                            </div>
                                            <!--end row-->

                                            <div>
                                                <h6>@Eagle.Resource.LanguageResource.PermanentAddress</h6>
                                            </div>
                                            <hr />
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.PLSCountryID)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("selectPLSCountryID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.PLSCountryID)
                                                    @Html.Hidden("PLSCountryName")
                                                </div>
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.PLSProvinceID)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("selectPLSProvinceID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.PLSProvinceID)
                                                    @Html.Hidden("PLSProvinceName")
                                                </div>

                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.PLSDistrictID)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("selectPLSDistrictID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.PLSDistrictID)
                                                    @Html.Hidden("PLSDistrictName")
                                                </div>
                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.PAddress)
                                                </div>
                                                <div class="col-md-10">
                                                    @Html.TextAreaFor(model => model.PAddress, 2, 1, new { @class = "span12" })
                                                </div>
                                            </div>
                                            <!--end row-->

                                            <div>
                                                <h6>@Eagle.Resource.LanguageResource.TemporaryAddress</h6>
                                            </div>
                                            <hr />

                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.TLSCountryID)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("selectTLSCountryID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.TLSCountryID)
                                                    @Html.Hidden("TLSCountryName")
                                                </div>
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.TLSProvinceID)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("selectTLSProvinceID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.TLSProvinceID)
                                                    @Html.Hidden("TLSProvinceName")
                                                </div>

                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.TLSDistrictID)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("selectTLSDistrictID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.TLSDistrictID)
                                                    @Html.Hidden("TLSDistrictName")
                                                </div>
                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.TAddress)
                                                </div>
                                                <div class="col-md-10">
                                                    @Html.TextAreaFor(model => model.TAddress, 2, 1, new { @name = "TAddress", @class = "span12" })
                                                </div>
                                            </div>
                                            <!--end row-->
                                            <!-- Contacts ----------------------------------------------------------------------------------------->
                                            <div>
                                                <h6>@Eagle.Resource.LanguageResource.NativeLocation</h6>
                                            </div>
                                            <hr />
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.NativeCountryID)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("selectNativeCountryID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.NativeCountryID)
                                                    @Html.Hidden("NativeCountryName")
                                                </div>
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.NativeProvinceID)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("selectNativeProvinceID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.NativeProvinceID)
                                                    @Html.Hidden("NativeProvinceName")
                                                </div>

                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.NativeDistrictID)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("selectNativeDistrictID", null, new { @class = "span12" })
                                                    @Html.HiddenFor(model => model.NativeDistrictID)
                                                    @Html.Hidden("NativeDistrictName")
                                                </div>


                                            </div>
                                            <!--end row-->
                                            <div>
                                                <h6>@Eagle.Resource.LanguageResource.EmergencyInfo</h6>
                                            </div>
                                            <hr />
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.EmergencyContact)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("EmergencyContact", null, new { @class = "span12", @name = "EmergencyContact" })
                                                </div>
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.EmergencyAddess)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("EmergencyAddess", null, new { @class = "span12", @name = "EmergencyAddess" })
                                                </div>
                                            </div>
                                            <!--end row-->
                                            <!--start row-->
                                            <div class="row">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.EmergencyMobile)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("EmergencyMobile", null, new { @class = "span12", @name = "EmergencyMobile" })
                                                </div>
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.EmergencyPhone)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("EmergencyPhone", null, new { @class = "span12", @name = "EmergencyPhone" })
                                                </div>
                                            </div>
                                            <!--end row-->


                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*---------------------------------------------AccountInfo----------------------------------------*@
                    <div class="tab-pane fade" id="pane-2">
                        <div class="accordion-inner">
                            <div class="accordion-content">
                                <div>
                                    <h6>@Eagle.Resource.LanguageResource.Account</h6>
                                </div>
                                <hr />
                                <!--start row-->
                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.AccountNumber)
                                    </div>
                                    <div class="col-md-4">
                                        @Html.TextBox("AccountNumber", null, new { @class = "span12", @name = "AccountNumber", autocomplete = "off" })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.AccountName)
                                    </div>
                                    <div class="col-md-4">
                                        @Html.TextBox("AccountName", null, new { @class = "span12", @name = "AccountName", autocomplete = "off" })
                                    </div>
                                </div>
                                <!--end row-->
                                <!--start row-->
                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.LSBankID)
                                    </div>
                                    <div class="col-md-4">
                                        <div class="@(ViewBag.btnAddBank != "hidden" ? "input-append" : "")">
                                            @Html.TextBox("selectBank", null, new { @class = "span12" })
                                            @Html.HiddenFor(model => model.LSBankID)
                                            @Html.Hidden("LSBankName")

                                            <span class="add-on @ViewBag.btnAddBank" id="btnAddBank"><i class="icon-plus"></i></span>
                                            <input id="btnReload_Bank" type="button" value="Reload" data-id="null" data-isclosed="false" style="display: none" />
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.LSBankBranchID)
                                    </div>
                                    <div class="col-md-4">
                                        <div class="@(ViewBag.btnAddBank != "hidden" ? "input-append" : "")">
                                            @Html.TextBox("selectBankBranch", null, new { @class = "span12" })
                                            @Html.HiddenFor(model => model.LSBankBranchID)
                                            @Html.Hidden("LSBankBranchName")

                                            <span class="add-on @ViewBag.btnAddBankBranch" id="btnAddBankBranch"><i class="icon-plus"></i></span>
                                            <input id="btnReload_BankBranch" type="button" value="Reload" data-id="null" data-isclosed="false" style="display: none" />
                                        </div>
                                    </div>
                                </div>
                                <!--end row-->
                                <!--start row-->
                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.Label("PayByBank", Eagle.Resource.LanguageResource.Payment)
                                    </div>
                                    <div class="col-md-4">

                                        @Html.RadioButtonFor(model => model.PayByBank, true, new { id = "ByBank", @style = "float:left;", @checked = "checked" })
                                        @Html.Label("ByBank", Eagle.Resource.LanguageResource.ByBank, new { @style = "float:left;margin:-4px 4px;" })

                                        @Html.RadioButtonFor(model => model.PayByBank, false, new { id = "ByCash", @style = "float:left;padding-left:5px;" })
                                        @Html.Label("ByCash", Eagle.Resource.LanguageResource.ByCash, new { @style = "float:left;margin:-4px 4px;" })
                                    </div>
                                </div>
                                <!--end row-->


                                <div>
                                    <h6>@Eagle.Resource.LanguageResource.Insurance</h6>
                                </div>
                                <hr />
                                <!--start row-->
                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.SIBook)
                                    </div>
                                    <div class="col-md-4">
                                        @* @Html.TextBox("SIBook", null, new { @class = "span8", @name = "SIBook", autocomplete = "off" })*@
                                        @Html.TextBoxFor(model => model.SIBook, new { autocomplete = "off" })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.HIBook)
                                    </div>
                                    <div class="col-md-4">
                                        @Html.TextBoxFor(model => model.HIBook, new { autocomplete = "off" })
                                    </div>
                                </div>
                                <!--end row-->
                                <!--start row-->
                                <div class="row">
                                    <div class="col-md-2">
                                    </div>
                                    <div class="col-md-4">
                                        @Html.CheckBox("SI", true, new { @class = "chk", @name = "SI", @style = "float:left;" })
                                        @Html.LabelFor(model => model.SI, new { @style = "float:left;margin:-4px 4px;" })
                                    </div>
                                    <div class="col-md-2">
                                    </div>
                                    <div class="col-md-4">
                                        @Html.CheckBox("HI", true, new { @class = "chk", @name = "HI", @style = "float:left;" })
                                        @Html.LabelFor(model => model.HI, new { @style = "float:left;margin:-4px 4px;" })
                                    </div>
                                </div>
                                <!--end row-->
                                <!--start row-->
                                <div class="row">
                                    <div class="col-md-2">
                                    </div>
                                    <div class="col-md-4">
                                        @Html.CheckBox("UI", true, new { @class = "chk", @name = "UI", @style = "float:left;" })
                                        @Html.LabelFor(model => model.UI, new { @style = "float:left;margin:-4px 4px;" })
                                    </div>
                                </div>
                                <!--end row-->

                                <div>
                                    <h6>@Html.Raw(Eagle.Resource.LanguageResource.Tax)</h6>
                                </div>
                                <hr />
                                <!--start row-->
                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.TaxNo)
                                    </div>
                                    <div class="col-md-4">
                                        @Html.TextBox("TaxNo", null, new { @class = "span12", @name = "TaxNo", autocomplete = "off" })
                                    </div>
                                    <div class="col-md-2">
                                    </div>
                                    <div class="col-md-4">
                                        @Html.CheckBox("SelfDeduction", false, new { @class = "chk", @name = "SelfDeduction", @style = "float:left;" })
                                        @Html.LabelFor(model => model.SelfDeduction, new { @style = "float:left;margin:-4px 4px;" })
                                    </div>
                                </div>
                                <!--end row-->
                                <!--start row-->
                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.NoOfDependent)
                                    </div>
                                    <div class="col-md-4">
                                        @Html.TextBox("NoOfDependent", null, new { @class = "span12", @name = "NoOfDependent", @type = "number", @min = "0", @max = "100", @value = "0" })
                                    </div>
                                    <div class="col-md-2">
                                    </div>
                                    <div class="col-md-4">
                                        @Html.CheckBox("DependDeduction", true, new { @class = "chk", @name = "DependDeduction", @style = "float:left;" })
                                        @Html.LabelFor(model => model.DependDeduction, new { @style = "float:left;margin:-4px 4px;" })
                                    </div>
                                </div>
                                <!--end row-->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        </div>

            <div class="form-group">
            <div class="footbar">
                <div>
                    <input type="button" id="btnReset" class="btn" data-dismiss="modal" aria-hidden="true" value="@Eagle.Resource.LanguageResource.Reset" />
                    <input type="button" id="btnAdd" value="@Eagle.Resource.LanguageResource.Save" class="btn btn-info add" />
                </div>
            </div>
        </div>
    }
</div>
}

@*@Html.Action("jqueryval", "Common", null)*@
<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>


<script type="text/javascript" charset="UTF-8">
    (function ($) {
        $.createDataBuilder_Emp = function (p) {
            var DataMgr = {
                config: {
                    isPostBack: false,
                    async: true,
                    cache: false,
                    processData: false,
                    mimeType: "multipart/form-data",
                    type: 'POST',
                    contentType: "application/json; charset=utf-8",
                    data: '{}',
                    dataType: 'json',
                    baseURL: p.BaseURL,
                    method: "",
                    url: "",
                    ajaxCallMode: 0,
                    isValid: false,
                    ContainerClientID: p.ContainerClientID
                },
                messages:
                {
                    nomenu: "No Data"
                },
                init: function (config) {
                    DataMgr.InitializeCotrols();
                    DataMgr.BindEvents();
                },
                ajaxSuccess: function (data) {
                    if (data.message == "timeout")
                        window.location.reload();
                    else {
                        switch (parseInt(DataMgr.config.ajaxCallMode)) {
                            case 1:
                                DataMgr.ResetControls();
                                break;
                            case 2:
                                DataMgr.ShowMessageBox(data);
                                break;
                        }
                    }
                },
                ajaxFailure: function (jqXHR, textStatus, errorThrown) {
                    handleAjaxErrors(jqXHR, textStatus, errorThrown);
                },
                ajaxCall: function (config) {
                    $.ajax({
                        type: DataMgr.config.type,
                        contentType: DataMgr.config.contentType,
                        cache: DataMgr.config.cache,
                        url: DataMgr.config.url,
                        data: DataMgr.config.data,
                        dataType: DataMgr.config.dataType,
                        success: DataMgr.ajaxSuccess,
                        error: DataMgr.ajaxFailure,
                        async: false
                    });
                },
                InitializeCotrols: function () {
                    // Hide the "busy" Gif at load:
                    ShowDateTimePicker();
                    $.validator.methods["date"] = function (value, element) { return true; }

                    DataMgr.RemoveQtip();
                    DataMgr.HandleTabEvent();

                    //start handling checkbox event ==================================================================================
                    DataMgr.HandleCheckBoxEventIsYOB("IsYOB", false, "dpDOB", "dpYOB");
                    //DataMgr.HandleCheckBoxEvent("PayByBank", false);
                    DataMgr.HandleCheckBoxEvent("SelfDeduction", false);
                    DataMgr.HandleCheckBoxEvent("DependDeduction", false);
                    DataMgr.HandleCheckBoxEvent("SI", true);
                    DataMgr.HandleCheckBoxEvent("HI", true);
                    DataMgr.HandleCheckBoxEvent("UI", true);
                    //end handling checkbox event ====================================================================================

                    //START SELECT2 EVENTS ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                    //Born Country - Province - District-------------------------------------------------------------------------------------------------------------------------------------------------------------
                    DataMgr.PopulateCountriesIntoDropDownList('selectBornLSCountryID', 'BornLSCountryID', 'BornLSCountryName',
                       "selectBornLSProvinceID", "BornLSProvinceID", "BornLSProvinceName", "selectBornLSDistrictID", "BornLSDistrictID", "BornLSDistrictName");

                    //Permanent Country - Province - District--------------------------------------------------------------------------------------------------------------------------------------------------------
                    DataMgr.PopulateCountriesIntoDropDownList('selectPLSCountryID', 'PLSCountryID', 'PLSCountryName',
                        "selectPLSProvinceID", "PLSProvinceID", "PLSProvinceName", "selectPLSDistrictID", "PLSDistrictID", "PLSDistrictName");

                    //Temporary Country - Province - District--------------------------------------------------------------------------------------------------------------------------------------------------------
                    DataMgr.PopulateCountriesIntoDropDownList('selectTLSCountryID', 'TLSCountryID', 'TLSCountryName',
                        "selectTLSProvinceID", "TLSProvinceID", "TLSProvinceName", "selectTLSDistrictID", "TLSDistrictID", "TLSDistrictName");

                    //Native Country - Province - District --------------------------------------------------------------------------------------------------------------------------------------------------------
                    DataMgr.PopulateCountriesIntoDropDownList('selectNativeCountryID', 'NativeCountryID', 'NativeCountryName',
                       "selectNativeProvinceID", "NativeProvinceID", "NativeProvinceName", "selectNativeDistrictID", "NativeDistrictID", "NativeDistrictName");

                    //Company Deparment Section ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                    DataMgr.LoadComboTree('LSCompanyID', '@Url.Action("GetHierachicalList", "LS_tblCompany")', true);

                    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                    BindAutoCompleteSelect2('@Url.Action("DropdownList", "Employee")', 'selectManager', '@Html.Raw(Eagle.Resource.LanguageResource.PleaseInputLineManager)', 'LineManagerID', 'LineManagerName');

                    BindAutoCompleteSelect2('@Url.Action("DropdownList", "LS_tblLocation")', 'selectLSLocationID', '@Html.Raw(Eagle.Resource.LanguageResource.PleaseInputLocationName)', 'LSLocationID', 'LSLocationName');

                    BindAutoCompleteSelect2('@Url.Action("DropdownList", "LS_tblProvince")', 'selectIDIssuedPlace', '@Html.Raw(Eagle.Resource.LanguageResource.PleaseInputIssuedPlaceName)', 'IDIssuedPlace', 'IDIssuedPlaceName');

                    BindAutoCompleteSelect2('@Url.Action("DropdownList", "LS_tblNationality")', 'selectLSNationalityID', '@Html.Raw(Eagle.Resource.LanguageResource.PleaseInputNationalityName)', 'LSNationalityID', 'LSNationalityName');

                    BindAutoCompleteSelect2('@Url.Action("DropdownList", "LS_tblReligion")', 'selectLSReligionID', '@Html.Raw(Eagle.Resource.LanguageResource.PleaseInputReligionName)', 'LSReligionID', 'LSReligionName');

                    BindAutoCompleteSelect2('@Url.Action("DropdownList", "LS_tblEthnic")', 'selectLSEthnicID', '@Html.Raw(Eagle.Resource.LanguageResource.PleaseInputEthnicName)', 'LSEthnicID', 'LSEthnicName');

                    BindAutoCompleteSelect2('@Url.Action("DropdownList", "LS_tblEducation")', 'selectLSEducationID', '@Html.Raw(Eagle.Resource.LanguageResource.PleaseInputEducationName)', 'LSEducationID', 'LSEducationName');

                    BindAutoCompleteSelect2('@Url.Action("DropdownList", "LS_tblMajor")', 'selectLSMajorID', '@Html.Raw(Eagle.Resource.LanguageResource.PleaseInputMajorName)', 'LSMajorID', 'LSMajorName');
                    //END SELECT2 EVENTS -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                    $("#myModal").draggable({ handle: ".modal-header" });
                },
                BindEvents: function () {

                    @*$('div[data-id="DOB"]').datetimepicker().on('changeDate', function (e) {
                        var flag = validateBirthDate($(this).find('input[type=text]').attr("id"));
                        if (flag == false)
                            ShowToolTip("DOB", '@Html.Raw(Eagle.Resource.LanguageResource.BirthDateInvalid)');
                        else
                            CloseToolTip("DOB");

                    });*@

                    //START SELECT2 EVENTS -------------------------------------------------------------------------------------------------------------------------------------
                    //BORNLS Country - Province - District
                    $('#selectBornLSCountryID').on("change", function () {
                        DataMgr.PopulateProvincesIntoDropDownList('selectBornLSProvinceID', 'BornLSProvinceID', 'BornLSProvinceName', 'BornLSCountryID', 'selectBornLSDistrictID', 'BornLSDistrictID', 'BornLSDistrictName');
                        DataMgr.PopulateDistrictsIntoDropDownList('selectBornLSDistrictID', 'BornLSDistrictID', 'BornLSDistrictName', 'BornLSProvinceID');
                    });
                    $('#selectBornLSProvinceID').on("change", function () {
                        DataMgr.PopulateDistrictsIntoDropDownList('selectBornLSDistrictID', 'BornLSDistrictID', 'BornLSDistrictName', 'BornLSProvinceID');
                    });

                    //PLS Country - Province - District
                    $('#selectPLSCountryID').on("change", function () {
                        DataMgr.PopulateProvincesIntoDropDownList('selectPLSProvinceID', 'PLSProvinceID', 'PLSProvinceName', 'PLSCountryID', 'selectPLSDistrictID', 'PLSDistrictID', 'PLSDistrictName');
                        DataMgr.PopulateDistrictsIntoDropDownList('selectPLSDistrictID', 'PLSDistrictID', 'PLSDistrictName', 'PLSProvinceID');
                    });
                    $('#selectPLSProvinceID').on("change", function () {
                        DataMgr.PopulateDistrictsIntoDropDownList('selectPLSDistrictID', 'PLSDistrictID', 'PLSDistrictName', 'PLSProvinceID');
                    });

                    //TLS Country - Province - District
                    $('#selectTLSCountryID').on("change", function () {
                        DataMgr.PopulateProvincesIntoDropDownList('selectTLSProvinceID', 'TLSProvinceID', 'TLSProvinceName', 'TLSCountryID', 'selectTLSDistrictID', 'TLSDistrictID', 'TLSDistrictName');
                        DataMgr.PopulateDistrictsIntoDropDownList('selectTLSDistrictID', 'TLSDistrictID', 'TLSDistrictName', 'TLSProvinceID');
                    });
                    $('#selectTLSProvinceID').on("change", function () {
                        DataMgr.PopulateDistrictsIntoDropDownList('selectTLSDistrictID', 'TLSDistrictID', 'TLSDistrictName', 'TLSProvinceID');
                    });

                    //Native Country - Province - District ===============================================================================================================================
                    $(document).on('change', '#selectNativeCountryID', function () {
                        DataMgr.PopulateProvincesIntoDropDownList('selectNativeProvinceID', 'NativeProvinceID', 'NativeProvinceName', 'NativeCountryID', 'selectNativeDistrictID', 'NativeDistrictID', 'NativeDistrictName');
                        DataMgr.PopulateDistrictsIntoDropDownList('selectNativeDistrictID', 'NativeDistrictID', 'NativeDistrictName', 'NativeProvinceID');
                    });

                    $(document).on('change', '#selectNativeProvinceID', function () {
                        DataMgr.PopulateDistrictsIntoDropDownList('selectNativeDistrictID', 'NativeDistrictID', 'NativeDistrictName', 'NativeProvinceID');
                    });



                    //END SELECT2 EVENTS ----------------------------------------------------------------------------------------------------------------------------------------
                    $(document).on('change', '#BloodType', function () {
                        $(this).find("option[value=" + $(this).val() + "]").attr('selected', true).siblings().attr('selected', false);
                    });

                    //****************************************************************************************************************
                    //Begin BANK - BRANCH *******************************************************************************************
                    //****************************************************************************************************************
                    DataMgr.PopulateBanksToDropDownList();
                    $(document).on('change', '#selectBank', function () {
                        //$(this).find("option[value=" + $(this).val() + "]").attr('selected', true).siblings().attr('selected', false);
                        DataMgr.PopulateBankBranchesToDropDownList();
                    });
                    //****************************************************************************************************************
                    //End BANK - BRANCH *********************************************************************************************
                    //****************************************************************************************************************

                    $(document).on("keyup keydown", "#IDNo", function () {
                        $(this).val($(this).val().toUpperCase());
                    });

                    $(document).on("keyup keydown", "#FirstName", function () {
                        //DataMgr.FormatString(this);
                        var first_name = $(this).val();
                        var last_name = $("#LastName").val();
                        var full_name = last_name + " " + first_name;
                        setTimeout(function () {
                            $('#EmergencyContact').val('');
                            $('#AccountName').val('');

                            $('#EmergencyContact').val(full_name);
                            $('#AccountName').val(full_name);
                        }, 50);
                    });

                    $(document).on("keyup keydown", "#LastName", function () {
                        DataMgr.FormatString(this);
                        var first_name = $("#FirstName").val();
                        var last_name = $(this).val();
                        var full_name = last_name + " " + first_name;
                        setTimeout(function () {
                            $('#EmergencyContact').val('');
                            $('#AccountName').val('');

                            $('#EmergencyContact').val(full_name);
                            $('#AccountName').val(full_name);
                        }, 50);
                    });

                    $(document).on("keyup keydown", "#PAddress", function () {
                        var text = $(this).val();
                        setTimeout(function () {
                            $('#EmergencyAddess').val('');
                            $('#EmergencyAddess').val(text);
                        }, 50);
                    });

                    $(document).on("keyup keydown", "#Telephone", function () {
                        var text = $(this).val();
                        setTimeout(function () {
                            $('#EmergencyPhone').val(text);
                        }, 50);
                    });

                    $(document).on("keyup keydown", "#Mobile", function () {
                        var text = $(this).val();
                        setTimeout(function () {
                            $('#EmergencyMobile').val(text);
                        }, 50);
                    });

                    $('input[type="number"]').returnPressNumber();

                    $("#FileUpload").change(function () {
                        DataMgr.PreviewImage("FileUpload", 50, 50);
                    });

                    $(document).on("click", ".close", function () {
                        $('.qtip').remove();
                        hideContentPopUp();
                        //$('#modal-content').html('');
                        //$('#myModal').modal('hide');
                    });

                    //Add and update post action
                    $(document).on("click", "#btnAdd", function () {
                        if (!$("#myform").valid()) { // Not Valid
                            //DataMgr.ValidateCode();
                            //DataMgr.ValidateDOBYOB();
                            //DataMgr.ValidateJoinDateStartDate();
                            //DataMgr.ValidateCompany("LSCompanyID");
                            alert("error");
                            return false;
                        }
                        else {
                            //Add new Item
                            if ($('input[type="file"]').val() != '') {
                                var fileInputId = 'FileUpload';
                                var folderKey = 'UPLOAD_EMPLOYEE_IMAGE_DIR';
                                var width = null;
                                var height = null;
                                var fileId = null;

                                var formData = new FormData();
                                formData.append('fileKey', fileInputId);
                                formData.append('FileUpload', $('input[type=file]')[0].files[0]);
                                formData.append('folderKey', folderKey);
                                if (width != null && width > 0)
                                    formData.append('width', width);
                                if (height != null && height > 0)
                                    formData.append('height', height);
                                if (fileId != null && fileId > 0)
                                    formData.append('fileId', fileId);

                                var baseUrl = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '');

                                $.ajax({
                                    type: "POST",
                                    url: baseUrl + "/Handlers/UploadFile.ashx",
                                    contentType: false,
                                    processData: false,
                                    data: formData,
                                    success: function (result) {
                                        $("input[name=FileId]:hidden").val(result);
                                        DataMgr.AddData();
                                    },
                                    error: function () {
                                        showMessageWithTitle('warning', '@Html.Raw(Eagle.Resource.LanguageResource.UploadFileError)', 'warning', 3000);
                                    }
                                });
                            } else {
                                alert("ad item");

                                DataMgr.AddData();
                            }
                        }
                        //===========================================================
                    });

                    // Reset form
                    $(document).on("click", "#btnReset", function () {
                        DataMgr.ResetControls();
                    });


                    //====================================================================
                    //Xu ly bank popup
                    //====================================================================
                    $(document).on("click", "#btnAddBank", function () {
                        DataMgr.PopulatePopupBank();
                    });

                    $(document).on("click", "#btnAddBankBranch", function () {
                        DataMgr.PopulatePopupBankBranch();
                    });

                    $(document).on("click", "#btnReload_Bank", function () {
                        var selectedValue = $(this).attr('data-id');
                        var isClosed = $(this).attr('data-isclosed');
                        DataMgr.PopulateBanksToDropDownList();
                        if (isClosed != undefined && isClosed != null && isClosed != '' && isClosed.toLowerCase() == 'true')
                            hideContentPopUp();
                    });

                    $(document).on("click", "#btnReload_BankBranch", function () {
                        var selectedValue = $(this).attr('data-id');
                        var isClosed = $(this).attr('data-isclosed');
                        DataMgr.PopulateBankBranchesToDropDownList();
                        if (isClosed != undefined && isClosed != null && isClosed != '' && isClosed.toLowerCase() == 'true')
                            hideContentPopUp();
                    });

                    $(document).on("click", "#btnReloadCode", function () {
                        DataMgr.GenerateCode();
                    });

                },
                RemoveQtip: function () {
                    $('.qtip').remove();
                    //$('span.error:first').qtip("hide");
                },
                HandleTabEvent: function () {
                    $(document).on("click", "a[data-toggle='tab']", function () {
                        if ($(this).attr('href') == '#pane-1') {
                            $('.qtip').qtip('show');
                        } else {
                            $('.qtip').qtip('hide');
                        }
                    });

                    $('.tab-content').children().removeClass('fade');
                    $('.nav-tabs a').click(function (e) {
                        if ($(this).parent('li').hasClass('active')) {
                            //$($(this).attr('href')).hide();
                            $(this).removeClass('active'); // remove active class from tabs
                        }
                        else {
                            e.preventDefault();
                            $(this).tab('show');
                            //$('.nav-tabs a[href="#myTab"]').tab('show');
                        }
                    });
                },
                GenerateCode: function () {
                    $.getJSON("/Admin/Employee/GenerateEmpCode",
                        function (data) {
                            $("#EmpCode").val(data);
                        });
                },
                ValidateCode: function () {
                    var params = {};
                    params.Code = $('#EmpCode').val();
                    $.getJSON('@Url.Action("ValidateEmpCode", "Employee")', params,
                         function (data) {
                             if (data == false) {
                                 ShowToolTip('EmpCode', '@Html.Raw(Eagle.Resource.LanguageResource.InValid)');
                                 return false;
                             }
                             else {
                                 CloseToolTip('EmpCode');
                                 return true;
                             }
                         });
                },
                ValidateJoinDateStartDate: function () {
                    var flag = true;
                    var JoinDate = $("#JoinDatePicker").val();
                    var StartDate = $("#StartDatePicker").val();
                    if (JoinDate != null && JoinDate != '' && StartDate != null && StartDate != '') {
                        flag = CompareDate(JoinDate, StartDate);
                        if (flag == false)
                            ShowToolTip('StartDate', '@Html.Raw(Eagle.Resource.LanguageResource.StartDateMustBeAfterJoinDate)');
                        else
                            CloseToolTip('StartDate');
                    }
                    return flag;
                },
                ValidateDOBYOB: function () {
                    var result = false;
                    var IsYOB = $("#IsYOB").is(":checked");
                    var DOB = $("#DOB").val();
                    var YOB = $("#YOB").val();

                    if (IsYOB == false) {
                        @* if (DOB != '') {
                            result = validateBirthDay(DOB);
                            if (result == false)
                                ShowToolTip("DOB", '@Html.Raw(Eagle.Resource.LanguageResource.InValidBirthDate)');
                            //result = true;
                        }
                        else*@
                        if (DOB == '') {
                            ShowToolTip("DOB", '@Html.Raw(Eagle.Resource.LanguageResource.Required)');
                        }

                    } else {
                        CloseToolTip("DOB");
                        if (YOB != '')
                            result = true;
                        else
                            ShowToolTip("YOB", '@Html.Raw(Eagle.Resource.LanguageResource.Required)');
                    }
                    return result;
                },
                SetDate: function (controlId, numberOfDaysToAdd) {
                    if (numberOfDaysToAdd == undefined || numberOfDaysToAdd == null)
                        numberOfDaysToAdd = 0;
                    var today = new Date();
                    today.setDate(today.getDate() + numberOfDaysToAdd)
                    today.setFullYear(today.getFullYear() + 1);

                    var day = today.getDate();
                    var month = ((today.getMonth().length + 1) === 1) ? (today.getMonth() + 1) : '0' + (today.getMonth() + 1);
                    var year = today.getFullYear();

                    var selectedDate = day + "/" + month + "/" + year;
                    if (controlId != undefined || controlId != null)
                        $('#' + controlId).val(selectedDate);
                },
                FormatString: function (obj) {
                    var strvalue;
                    if (eval(obj))
                        strvalue = eval(obj).value;
                    else
                        strvalue = obj;
                    var str;
                    str = strvalue.toString().replace(/\$|\,/g, '');

                    if (!isNaN(str))
                        str = "";

                    eval(obj).value = str;
                },
                SetTabActive: function (tabId, panelId) {
                    var tabPanel = $('li[id="' + tabId + '"]');
                    var panel = $('div[id="' + panelId + '"]');

                    if (!tabPanel.hasClass('active'))
                        tabPanel.addClass('active').siblings().removeClass('active');

                    if (!panel.hasClass('active'))
                        panel.addClass('active in').siblings().removeClass('active');
                },
                PopulateCompaniesToDropDownList: function () {
                    var select = $("#selectCompanies");
                    select.empty();
                    $.getJSON("/Admin/LS_tblCompany/GetParentList",
                        function (classesData) {
                            if (classesData.length > 0) {
                                select.append($('<option/>', { value: 'Null', text: " --- @Eagle.Resource.LanguageResource.Select --- " }));
                                $.each(classesData, function (index, itemData) {
                                    select.append($('<option/>', {
                                        value: itemData.Value,
                                        text: itemData.Text
                                    }));
                                });
                                //select.find('option:first').attr("selected", "selected");
                            } else
                                select.append($('<option/>', { value: 'Null', text: " --- @Eagle.Resource.LanguageResource.None --- " }));
                        });
                },
                PopulateBanksToDropDownList: function () {
                    var placeholder = '@Html.Raw(Eagle.Resource.LanguageResource.PleaseInputBank)';
                    var requestUrl = '@Url.Action("DropdownList", "LS_tblBank")';
                    var pageSize = 20;
                    var selectBox = $('#selectBank');
                    var hiddenId = $("input[name=LSBankID]");
                    var hiddenName = $("input[name=LSBankName]");
                    var hiddenBankBranchId = $("input[name=LSBankBranchID]");
                    var hiddenBankBranchName = $("input[name=LSBankBranchName]");

                    selectBox.select2({
                        placeholder: placeholder,
                        minimumInputLength: 0,
                        allowClear: true,
                        ajax: {
                            url: requestUrl,
                            dataType: 'json',
                            params: {
                                contentType: 'application/json; charset=utf-8'
                            },
                            quietMillis: 100,  //How long the user has to pause their typing before sending the next request
                            data: function (term, page) {
                                return {
                                    pageSize: pageSize,
                                    pageNum: page,
                                    searchTerm: term
                                };
                            },
                            results: function (data, page) {
                                //Used to determine whether or not there are more results available,
                                //and if requests for more data should be sent in the infinite scrolling
                                var more = (page * pageSize) < data.Total;
                                return { results: data.Results, more: more };
                            }
                        },
                        //Chọn xong => làm gì đó
                        formatSelection: function (result) {
                            hiddenId.val(result.id)
                            hiddenName.val(result.name)
                            return result.name;
                        },
                        //Chọn xong => return kết quả hiển thị
                        formatResult: function (result) {
                            return result.name;
                        },
                        //Đầu tiên gán vào từ đầu
                        initSelection: function (element, callback) {
                            var selected_id = hiddenId.val();
                            var selected_name = hiddenName.val();
                            var data = { id: selected_id, name: selected_name, text: selected_name };
                            callback(data);
                        }
                    });

                    selectBox.select2('val', hiddenId.val());
                    selectBox.on('select2-removed', function (e) {
                        hiddenId.val('');
                        hiddenName.val('');
                        hiddenBankBranchId.val('');
                        hiddenBankBranchName.val('');
                    });

                    selectBox.on('change', function (e) {
                        hiddenBankBranchId.val('');
                        hiddenBankBranchName.val('');
                    });

                    DataMgr.PopulateBankBranchesToDropDownList();
                },
                PopulateBankBranchesToDropDownList: function () {
                    var placeholder = '@Html.Raw(Eagle.Resource.LanguageResource.PleaseInputBankBranch)';
                    var requestUrl = '@Url.Action("DropdownList", "LS_tblBankBranch")';
                    var pageSize = 20;
                    var selectBox = $('#selectBankBranch');
                    var hiddenId = $("input[name=LSBankBranchID]");
                    var hiddenName = $("input[name=LSBankBranchName]");

                    var hiddenBankIdValue = $("input[name=LSBankID]").val();
                    var requestParams = { "LSBankID": $("input[name=LSBankID]").val() };

                    if (hiddenBankIdValue == '') {
                        selectBox.select2("val", "");
                        selectBox.attr('disabled', 'disabled');
                    }
                    else {
                        selectBox.removeAttr('disabled');
                        selectBox.select2({
                            placeholder: placeholder,
                            minimumInputLength: 0,
                            allowClear: true,
                            ajax: {
                                url: requestUrl,
                                dataType: 'json',
                                quietMillis: 100,  //How long the user has to pause their typing before sending the next request
                                data: function (term, page) {
                                    var params = {
                                        pageSize: pageSize,
                                        pageNum: page,
                                        searchTerm: term
                                    };
                                    var objParams = $.extend({}, params, requestParams);
                                    return objParams;
                                },
                                results: function (data, page) {
                                    //Used to determine whether or not there are more results available,
                                    //and if requests for more data should be sent in the infinite scrolling
                                    var more = (page * pageSize) < data.Total;
                                    return { results: data.Results, more: more };
                                }
                            },
                            formatSelection: function (result) {
                                hiddenId.val(result.id);
                                hiddenName.val(result.name);
                                return result.name;
                            },
                            formatResult: function (result) {
                                return result.name;
                            },
                            initSelection: function (element, callback) {
                                var selected_id = hiddenId.val();
                                var selected_name = hiddenName.val();
                                var data = { id: selected_id, name: selected_name, text: selected_name };
                                callback(data);
                            }
                        });
                        selectBox.select2('val', hiddenId.val());
                        selectBox.on('select2-removed', function (e) {
                            hiddenId.val('');
                        });
                    }
                },
                @*  PopulateBanksToDropDownList: function (selectedValue) {
                    var select = $("#LSBankID");
                    select.empty();
                    $.getJSON("/Admin/LS_tblBank/GetBanks",
                        function (classesData) {
                            if (classesData.length > 0) {
                                select.append($('<option/>', { value: '', text: " --- @Eagle.Resource.LanguageResource.Select --- " }));
                                $.each(classesData, function (index, itemData) {
                                    select.append($('<option/>', {
                                        value: itemData.Value,
                                        text: itemData.Text
                                    }));
                                });

                                if (selectedValue != null || selectedValue != '')
                                    select.find("option[value=" + selectedValue + "]").attr('selected', true).siblings().attr('selected', false);
                                else
                                    select.find('option:first').attr("selected", "selected");

                                DataMgr.PopulateBankBranchesToDropDownList(null);
                            } else
                                select.append($('<option/>', { value: '', text: " --- @Eagle.Resource.LanguageResource.None --- " }));
                        });
                },
                PopulateBankBranchesToDropDownList: function (selectedValue) {
                    var select = $("#LSBankBranchID");
                    select.empty();
                    var id = parseInt($("#LSBankID").val());

                    var param_data = { "id": id };
                    if (id > 0) {
                        select.removeAttr('disabled');
                        $.getJSON("/Admin/LS_tblBankBranch/GetBankBranchesByBankId", param_data,
                            function (classesData) {
                                if (classesData.length > 0) {
                                    select.append($('<option/>', { value: '', text: " --- @Eagle.Resource.LanguageResource.Select --- " }));
                                    $.each(classesData, function (index, itemData) {
                                        select.append($('<option/>', {
                                            value: itemData.Value,
                                            text: itemData.Text
                                        }));
                                    });

                                    if (selectedValue != null || selectedValue != '')
                                        select.find("option[value=" + selectedValue + "]").attr('selected', true).siblings().attr('selected', false);
                                    else
                                        select.find('option:first').attr("selected", "selected");
                                } else {
                                    select.append($('<option/>', { value: '', text: " --- @Eagle.Resource.LanguageResource.None --- " }));
                                }
                            });
                    } else {
                        select.append($('<option/>', { value: '', text: " --- @Eagle.Resource.LanguageResource.None --- " }));
                        select.attr('disabled', 'disabled');
                    }
                },*@
                PopulateCountriesIntoDropDownList: function (selectBoxCountryId, hiddenCountryId, hiddenCountryName,
                    selectBoxProvinceId, hiddenProvinceId, hiddenProvinceName, selectBoxDistrictId, hiddenDistrictId, hiddenDistrictName) {
                    var placeholder = '@Html.Raw(Eagle.Resource.LanguageResource.PleaseInputCountryName)';
                    var requestUrl = '@Url.Action("DropdownList", "LS_tblCountry")';
                    var pageSize = 20;
                    var selectBox = $('#' + selectBoxCountryId);
                    var hiddenId = $("input[name=" + hiddenCountryId + "]");
                    var hiddenName = $("input[name=" + hiddenCountryName + "]");
                    var _hiddenProvinceId = $("input[name=" + hiddenProvinceId + "]");
                    var _hiddenProvinceName = $("input[name=" + hiddenProvinceName + "]");
                    var _hiddenDistrictId = $("input[name=" + hiddenDistrictId + "]");
                    var _hiddenDistrictName = $("input[name=" + hiddenDistrictName + "]");

                    selectBox.select2({
                        placeholder: placeholder,
                        minimumInputLength: 0,
                        allowClear: true,
                        ajax: {
                            url: requestUrl,
                            dataType: 'json',
                            params: {
                                contentType: 'application/json; charset=utf-8'
                            },
                            quietMillis: 100,  //How long the user has to pause their typing before sending the next request
                            data: function (term, page) {
                                return {
                                    pageSize: pageSize,
                                    pageNum: page,
                                    searchTerm: term
                                };
                            },
                            results: function (data, page) {
                                //Used to determine whether or not there are more results available,
                                //and if requests for more data should be sent in the infinite scrolling
                                var more = (page * pageSize) < data.Total;
                                return { results: data.Results, more: more };
                            }
                        },
                        //Chọn xong => làm gì đó
                        formatSelection: function (result) {
                            hiddenId.val(result.id)
                            if (LanguageId == 124) {
                                hiddenName.val(result.name)
                                return result.name;
                            } else {
                                hiddenName.val(result.text)
                                return result.text;
                            }
                        },
                        //Chọn xong => return kết quả hiển thị
                        formatResult: function (result) {
                            if (LanguageId == 124) {
                                return result.name;
                            } else {
                                return result.text;
                            }
                        },
                        //Đầu tiên gán vào từ đầu
                        initSelection: function (element, callback) {
                            var selected_id = hiddenId.val();
                            var selected_name = hiddenName.val();
                            var data = { id: selected_id, name: selected_name, text: selected_name };
                            callback(data);
                        }
                    });

                    selectBox.select2('val', hiddenId.val());
                    selectBox.on('select2-removed', function (e) {
                        hiddenId.val('');
                        hiddenName.val('');
                        _hiddenProvinceId.val('');
                        _hiddenProvinceName.val('');
                        _hiddenDistrictId.val('');
                        _hiddenDistrictName.val('');
                    });

                    selectBox.on('change', function (e) {
                        _hiddenProvinceId.val('');
                        _hiddenProvinceName.val('');
                        _hiddenDistrictId.val('');
                        _hiddenDistrictName.val('');
                    });


                    DataMgr.PopulateProvincesIntoDropDownList(selectBoxProvinceId, hiddenProvinceId, hiddenProvinceName, hiddenCountryId,
                        selectBoxDistrictId, hiddenDistrictId, hiddenDistrictName);

                    DataMgr.PopulateDistrictsIntoDropDownList(selectBoxDistrictId, hiddenDistrictId, hiddenDistrictName, hiddenProvinceId);
                },
                PopulateProvincesIntoDropDownList: function (selectBoxProvinceId, hiddenProvinceId, hiddenProvinceName, hiddenCountryId,
                        selectBoxDistrictId, hiddenDistrictId, hiddenDistrictName) {
                    var placeholder = '@Html.Raw(Eagle.Resource.LanguageResource.PleaseInputProvinceName)';
                    var requestUrl = '@Url.Action("DropdownList", "LS_tblProvince")';
                    var pageSize = 20;
                    var selectBox = $('#' + selectBoxProvinceId);
                    var hiddenId = $("input[name=" + hiddenProvinceId + "]");
                    var hiddenName = $("input[name=" + hiddenProvinceName + "]");
                    var _hiddenDistrictId = $("input[name=" + hiddenDistrictId + "]");
                    var _hiddenDistrictName = $("input[name=" + hiddenDistrictName + "]");

                    var requestParams = { "CountryID": $("input[name=" + hiddenCountryId + "]").val() };
                    if ($("input[name=" + hiddenCountryId + "]").val() == '') {
                        selectBox.select2("val", "");
                        selectBox.attr('disabled', 'disabled');
                    }
                    else {
                        selectBox.removeAttr('disabled');
                        selectBox.select2({
                            placeholder: placeholder,
                            minimumInputLength: 0,
                            allowClear: true,
                            ajax: {
                                url: requestUrl,
                                dataType: 'json',
                                quietMillis: 100,  //How long the user has to pause their typing before sending the next request
                                data: function (term, page) {
                                    var params = {
                                        pageSize: pageSize,
                                        pageNum: page,
                                        searchTerm: term
                                    };
                                    var objParams = $.extend({}, params, requestParams);
                                    return objParams;
                                },
                                results: function (data, page) {
                                    //Used to determine whether or not there are more results available,
                                    //and if requests for more data should be sent in the infinite scrolling
                                    var more = (page * pageSize) < data.Total;
                                    return { results: data.Results, more: more };
                                }
                            },
                            formatSelection: function (result) {
                                hiddenId.val(result.id);
                                if (LanguageId == 124) {
                                    hiddenName.val(result.name);
                                    return result.name;
                                } else {
                                    hiddenName.val(result.text);
                                    return result.text;
                                }
                            },
                            formatResult: function (result) {
                                if (LanguageId == 124) {
                                    return result.name;
                                } else {
                                    return result.text;
                                }
                            },
                            initSelection: function (element, callback) {
                                var selected_id = hiddenId.val();
                                var selected_name = hiddenName.val();
                                var data = { id: selected_id, name: selected_name, text: selected_name };
                                callback(data);
                            }
                        });
                        selectBox.select2('val', hiddenId.val());
                        selectBox.on('select2-removed', function (e) {
                            hiddenId.val('');
                            hiddenName.val('');
                            _hiddenDistrictId.val('');
                            _hiddenDistrictName.val('');
                        });

                        selectBox.on('change', function (e) {
                            _hiddenDistrictId.val('');
                            _hiddenDistrictName.val('');
                        });

                        DataMgr.PopulateDistrictsIntoDropDownList(selectBoxDistrictId, hiddenDistrictId, hiddenDistrictName, hiddenProvinceId);
                    }
                },
                PopulateDistrictsIntoDropDownList: function (selectBoxDistrictId, hiddenDistrictId, hiddenDistrictName, hiddenProvinceId) {
                    var placeholder = '@Html.Raw(Eagle.Resource.LanguageResource.PleaseInputDistrictName)';
                    var requestUrl = '@Url.Action("DropdownList", "LS_tblDistrict")';
                    var pageSize = 20;
                    var selectBox = $('#' + selectBoxDistrictId);
                    var hiddenId = $("input[name=" + hiddenDistrictId + "]");
                    var hiddenName = $("input[name=" + hiddenDistrictName + "]");
                    var requestParams = { "ProvinceID": $("input[name=" + hiddenProvinceId + "]").val() };
                    if ($("input[name=" + hiddenProvinceId + "]").val() == '') {
                        selectBox.select2("val", "");
                        selectBox.attr('disabled', 'disabled');
                    }
                    else {
                        selectBox.removeAttr('disabled');
                        selectBox.select2({
                            placeholder: placeholder,
                            minimumInputLength: 0,
                            allowClear: true,
                            ajax: {
                                url: requestUrl,
                                dataType: 'json',
                                quietMillis: 100,  //How long the user has to pause their typing before sending the next request
                                data: function (term, page) {
                                    var params = {
                                        pageSize: pageSize,
                                        pageNum: page,
                                        searchTerm: term
                                    };
                                    var objParams = $.extend({}, params, requestParams);
                                    return objParams;
                                },
                                results: function (data, page) {
                                    //Used to determine whether or not there are more results available,
                                    //and if requests for more data should be sent in the infinite scrolling
                                    var more = (page * pageSize) < data.Total;
                                    return { results: data.Results, more: more };
                                }
                            },
                            formatSelection: function (result) {
                                hiddenId.val(result.id);
                                if (LanguageId == 124) {
                                    hiddenName.val(result.name);
                                    return result.name;
                                } else {
                                    hiddenName.val(result.text);
                                    return result.text;
                                }
                            },
                            formatResult: function (result) {
                                if (LanguageId == 124) {
                                    return result.name;
                                } else {
                                    return result.text;
                                }
                            },
                            initSelection: function (element, callback) {
                                var selected_id = hiddenId.val();
                                var selected_name = hiddenName.val();
                                var data = { id: selected_id, name: selected_name, text: selected_name };
                                callback(data);
                            }
                        });
                        selectBox.select2('val', hiddenId.val());
                        selectBox.on('select2-removed', function (e) {
                            hiddenId.val('');
                        });
                    }
                },
                LoadComboTree: function (selectId, actionUrl, isRequired) {
                    var selectBox = $('#' + selectId);

                    var hiddenBox = $('input[type=hidden][name="' + selectId + '"]');
                    var selectedValue = selectBox.val();

                    if (isRequired == undefined || isRequired == null)
                        isRequired = false;

                    selectBox.combotree({
                        url: actionUrl,
                        textField: 'text',
                        valueField: 'id',
                        required: isRequired,
                        editable: false,
                        onLoadSuccess: function (row, data) {
                            $(this).tree("collapseAll");
                        },
                        onSelect: function (node) {
                            var tree = $(this).tree;
                            //Selected node is a leaf node, if it is not a leaf node, clear the check
                            var isLeaf = tree('isLeaf', node.target);
                            if (!isLeaf) {
                                var error_message = '@Html.Raw(Eagle.Resource.LanguageResource.PleaseSelectADepartment)';
                                DataMgr.AddTooltip(selectId, error_message);
                            } else {
                                DataMgr.RemoveTooltip(selectId);
                            }
                        },
                        onClick: function (node) {
                            selectedValue = node.id;
                            $(this).val(selectedValue);
                            hiddenBox.val(selectedValue);
                        }
                    });
                    selectBox.combotree('setValue', selectedValue);
                },
                ValidateCompany: function (elementId) {
                    // nếu mà là note cuối cùng cho qua
                    // note cấp trên thì báo lỗi
                    var flag = false;
                    if (elementId != undefined && elementId != null) {
                        var selectedValue = $('input[type=hidden][name="' + elementId + '"]').val();

                        if (selectedValue != undefined && selectedValue != null) {
                            var error_message = '';
                            if (selectedValue == '0' || selectedValue == null) {
                                error_message = '@Eagle.Resource.LanguageResource.PleaseChooseCompany';
                                DataMgr.AddTooltip(elementId, error_message);
                            }
                            else {
                                var cb_tree = $("#" + elementId).combotree('tree');	// get the tree object
                                var node = cb_tree.tree('getSelected');		// get selected node

                                if (!$("#" + elementId).tree('isLeaf', node.target)) {
                                    var error_message = '@Html.Raw(Eagle.Resource.LanguageResource.PleaseSelectADepartment)';
                                    DataMgr.AddTooltip(elementId, error_message);
                                } else {
                                    DataMgr.RemoveTooltip(elementId);
                                    flag = true;
                                }
                            }
                        } else {
                            error_message = '@Eagle.Resource.LanguageResource.InValid';
                            DataMgr.AddTooltip(elementId, error_message);
                        }
                    }
                    return flag;
                },
                AddTooltip: function (elementId, message) {
                    if (elementId != undefined && elementId != null) {
                        var qtipId = 'qtip-' + elementId;
                        var element = $('input[type=hidden][name="' + elementId + '"]');

                        if (element.hasClass('input-validation-error'))
                            element.addClass('input-validation-error');
                        element.attr({ 'data-hasqtip': elementId, 'aria-describedby': qtipId });

                        var valSpan = element.parents().siblings('span[data-valmsg-for="' + elementId + '"]');
                        valSpan.addClass('field-validation-error').removeClass('field-validation-valid');

                        var divContent = $('<div/>', {
                            id: qtipId + '-content',
                            // 'class': 'qtip qtip-default ui-tooltip-red qtip-pos-rc qtip-focus',
                            'class': 'ui-tooltip-red qtip-pos-rc qtip-focus',
                            attr: { 'aria-atomic': "true" },
                            html: '<span id="' + qtipId + '-content-span" for="' + elementId + '"></span>'
                        });

                        var divWrapper = $('<div/>', {
                            id: qtipId,
                            'class': 'qtip-default ui-tooltip-red qtip-pos-rc qtip-focus',
                            attr: {
                                style: "z-index: 15003; display: block; top: 375px; left: 737.467px;",
                                tracking: "false", role: "alert", "aria-live": "polite", "aria-atomic": "false",
                                "aria-describedby": "qtip-1-content", "aria-hidden": "false", "data-qtip-id": "1",
                            }
                        });

                        if (valSpan.siblings('#' + qtipId).length == 0) {
                            divWrapper.append(divContent);
                            divWrapper.insertAfter(valSpan);
                        }


                        showMessageWithTitle('warning', message, "warning", 3000);
                        $('#' + qtipId + '-content-span').html(message);
                        element.show();
                    }
                },
                RemoveTooltip: function (elementId) {
                    var qtipId = $('#qtip-' + elementId);
                    qtipId.remove();
                },
                HandleCheckBoxEventIsYOB: function (checkFieldId, chkStatus, divBox1, divBox2) {
                    var name = $("#" + checkFieldId).attr("name");
                    var checkBoxSelector = $("input:checkbox[name=" + name + "]");
                    var hiddenSelector = $("input:hidden[name=" + name + "]");
                    var divContainer1 = $("#" + divBox1);
                    var divContainer2 = $("#" + divBox2);

                    checkBoxSelector.attr("checked", chkStatus);
                    checkBoxSelector.val(chkStatus);
                    hiddenSelector.val(chkStatus);

                    if (chkStatus == true) {
                        divContainer1.css("display", "none");
                        divContainer2.css("display", "block");
                    } else {
                        divContainer1.css("display", "block");
                        divContainer2.css("display", "none");
                    }

                    checkBoxSelector.click(function () {
                        var checkBoxStatus = $(this).is(":checked");
                        checkBoxSelector.attr("checked", checkBoxStatus);
                        checkBoxSelector.val(checkBoxStatus);
                        hiddenSelector.val(checkBoxStatus);
                        if (checkBoxStatus == true) {
                            divContainer1.css("display", "none");
                            divContainer2.css("display", "block");
                        } else {
                            divContainer1.css("display", "block");
                            divContainer2.css("display", "none");
                        }
                    });
                },
                HandleCheckBoxEvent: function (checkFieldId, chkStatus) {
                    var name = $("#" + checkFieldId).attr("name");
                    var checkBoxSelector = $("input:checkbox[name=" + name + "]");
                    var hiddenSelector = $("input:hidden[name=" + name + "]");

                    checkBoxSelector.attr("checked", chkStatus);
                    checkBoxSelector.val(chkStatus);
                    hiddenSelector.val(chkStatus);

                    checkBoxSelector.click(function () {
                        var checkBoxStatus = $(this).is(":checked");
                        checkBoxSelector.attr("checked", checkBoxStatus);
                        checkBoxSelector.val(checkBoxStatus);
                        hiddenSelector.val(checkBoxStatus);
                    });
                },
                PreviewImage: function (id, width, height) {
                    var f = document.getElementById(id).files[0];
                    var output_container = document.getElementById("ImagePreviewBox");
                    if (output_container != undefined && output_container != null) {
                        output_container.innerHTML = "";
                        output_container.style.display = 'block';

                        var oFReader = new FileReader();
                        oFReader.readAsDataURL(f);

                        oFReader.onload = (function (theFile) {
                            return function (e) {
                                var span = document.createElement('span');
                                span.innerHTML = '<img class="thumb" src="' + e.target.result + '" title="' + escape(theFile.name) + '" width="' + width + '" height="' + height + '"/>';
                                output_container.insertBefore(span, null);
                            };
                        })(f);
                    }
                },
                UploadFile: function (fileInputId, folderKey, width, height, fileId) {
                    var formData = new FormData();
                    formData.append('fileKey', fileInputId);
                    formData.append('FileUpload', $('input[type=file]')[0].files[0]);
                    formData.append('folderKey', folderKey);
                    if (width != null && width > 0)
                        formData.append('width', width);
                    if (height != null && height > 0)
                        formData.append('height', height);
                    if (fileId != null && fileId > 0)
                        formData.append('fileId', fileId);
                    var baseUrl = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : ''); var baseUrl = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '');
                    $.ajax({
                        type: "POST",
                        url: baseUrl + "/Handlers/UploadFile.ashx",
                        contentType: false,
                        processData: false,
                        data: formData,
                        success: function (result) {
                            $("#FileId").val(result);
                        },
                        error: function () {
                            showMessageWithTitle('error', '@Html.Raw(Eagle.Resource.LanguageResource.UploadFileError)', "error", 3000);
                        }
                    });
                },
                ConvertFormToJSON: function (form) {
                    var array = $("#" + form).serializeArray();
                    var json = {};
                    $.each(array, function () {
                        json[this.name] = this.value || '';
                    });
                    return JSON.stringify(json);
                },
                PopulatePopupBank: function () {
                    $("body").addClass("loading");
                    var service_url = "/Admin/LS_tblBank/Index";
                    $.ajax({
                        type: "GET",
                        url: service_url,
                        success: function (data, statusCode, xhr) {
                            if (data.message == "timeout") {
                                window.location.reload();
                            } else {
                                showContentPopUp('@Html.Raw(Eagle.Resource.LanguageResource.BankManagement)', data);
                            }
                        }, error: function (jqXHR, textStatus, errorThrown) {
                            handleAjaxErrors(jqXHR, textStatus, errorThrown);
                        }
                    });
                },
                PopulatePopupBankBranch: function () {
                    var BankID = $("#LSBankID").val();
                    if (BankID == undefined || BankID == null || BankID == 0) {
                        showContentPopUp("@Eagle.Resource.LanguageResource.Warning", "@Eagle.Resource.LanguageResource.PleaseSelectBankBeforeSelectingBankBranch");
                    } else {
                        $("body").addClass("loading");
                        var params = { "BankID": $("#LSBankID").val(), "BankName": $("#LSBankID").find(":selected").text() };
                        var service_url = "/Admin/LS_tblBankBranch/Index";
                        $.ajax({
                            type: "GET",
                            url: service_url,
                            data: params,
                            success: function (data, statusCode, xhr) {
                                if (data.message == "timeout") {
                                    window.location.reload();
                                } else {
                                    showContentPopUp('@Html.Raw(Eagle.Resource.LanguageResource.BankBranchManagement)', data);
                                }
                            }, error: function (jqXHR, textStatus, errorThrown) {
                                handleAjaxErrors(jqXHR, textStatus, errorThrown);
                            }
                        });
                    }
                },
                AddData: function () {
                    var data = DataMgr.ConvertFormToJSON("myform");
                    this.config.method = "Insert";
                    this.config.data = data;
                    this.config.url = DataMgr.config.baseURL + this.config.method;
                    this.config.ajaxCallMode = 2;
                    this.ajaxCall(this.config);
                },
                ShowMessageBox: function (data) {
                    var titleSuccess = "", titleFailure = "", titleAjaxError = "";
                    titleAjaxError = "@Eagle.Resource.LanguageResource.Error";
                    titleSuccess = "@Eagle.Resource.LanguageResource.CreateSuccess";
                    titleFailure = "@Eagle.Resource.LanguageResource.CreateFailure";

                    var result = JSON.parse(data);
                    if (result.flag == 'true') {
                        showMessageWithTitle(titleSuccess, result.message, "success", 20000);
                        DataMgr.ResetControls();
                    } else {
                        showMessageWithTitle(titleFailure, result.message, "error", 20000);
                    }
                },
                ResetControls: function () {
                    var validateObj = $('#myform');

                    validateObj.find('input:text, input:password, input:file, select, textarea').not('.ignored').val('');
                    validateObj.find('input:radio, input:checkbox').removeAttr('checked').removeAttr('selected');
                    validateObj.find('input[type="number"]').val(0);
                    validateObj.find('select').find('option:first').attr('selected', true).siblings().attr('selected', false);

                    DataMgr.InitializeCotrols();
                    DataMgr.GenerateCode();
                },
                HandleBootstrapAccordionEvent: function () {
                    $('#collapse1').collapse('show');
                    $(document).on('click', 'div.accordion-heading a', function () {
                        var next_element = $(this).parent('.accordion-heading').parent('.accordion-group').siblings();
                        next_element.find('.accordion-body').removeClass("in").css("height", "0");
                        next_element.find('.accordion-heading').find(".icon-chevron-up").removeClass("icon-chevron-up").addClass("icon-chevron-down");
                    });

                    $('div.accordion-body').on('shown', function () {

                        $(this).parent("div").find(".icon-chevron-down")
                               .removeClass("icon-chevron-down").addClass("icon-chevron-up");
                    });

                    $('div.accordion-body').on('hidden', function () {
                        $(this).parent("div").find(".icon-chevron-up")
                               .removeClass("icon-chevron-up").addClass("icon-chevron-down");
                    });

                    function toggleChevron(e) {
                        $(e.target)
                            .prev('.panel-heading')
                            .find("i.indicator")
                            .toggleClass('glyphicon-chevron-down glyphicon-chevron-up');
                    }
                    $('#accordion_panel').on('hidden.bs.collapse', toggleChevron);
                    $('#accordion_panel').on('shown.bs.collapse', toggleChevron);
                }
            };
            DataMgr.init();
        }
        var BaseURL = areas + "/Employee/";
        var base_settings = {
            ContainerClientID: "MainBody",
            BaseURL: BaseURL
        };

        $.fn.EmployeeManager = $.createDataBuilder_Emp(base_settings);
    })(jQuery);
</script>
