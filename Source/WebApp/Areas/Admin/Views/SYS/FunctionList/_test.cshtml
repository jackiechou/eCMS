<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1" />
    <title>Fancytree - Example: Drag'n'drop</title>
    <link type="text/css" rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1/themes/start/jquery-ui.css" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.js" type="text/javascript"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1/jquery-ui.js" type="text/javascript"></script>
    <script src="http://view.jqueryui.com/menubar/ui/jquery.ui.popup.js" type="text/javascript"></script>

    <link href="../src/skin-win7/ui.fancytree.css" rel="stylesheet" type="text/css" />
    <script src="../src/jquery.fancytree.js" type="text/javascript"></script>
    <script src="../src/jquery.fancytree.dnd.js" type="text/javascript"></script>
    <script src="../src/jquery.fancytree.menu.js" type="text/javascript"></script>


    <style type="text/css">
        .ui-menu {
            width: 100px;
            font-size: 63%;
        }
    </style>


    <!-- Add code to initialize the tree when the document is loaded: -->
    <script type="text/javascript">
        $(function () {
            //function logEvent(event, data, msg){
            ////var args = $.isArray(args) ? args.join(", ") :
            //msg = msg ? ": " + msg : "";
            //$.ui.fancytree.info("Event('" + event.type + "', node=" + data.node + ")" + msg);
            //}
            function getDropSourceList(sourceNode, mode) {
                var res = [];
                if (!sourceNode) {
                    return res;
                }
                if (sourceNode.isSelected()) {
                    res = sourceNode.tree.getSelectedNodes();
                    //if (mode === "after") {
                    //	            res.reverse();
                    //}
                } else {
                    res = [sourceNode];
                }
                return res;
            }

            // Attach the fancytree widget to an existing <div id="tree"> element
            // and pass the tree options as an argument to the fancytree() function:
            $("#tree").fancytree({
                //extensions: ["dnd", "menu"],
                //				checkbox: true,
                //				icons: false,
                //                activeVisible: true,
                selectMode: 1,
                extensions: ["dnd"],
                dnd: {
                    preventVoidMoves: true, // Prevent dropping nodes 'before self', etc.
                    preventRecursiveMoves: true, // Prevent dropping nodes on own descendants
                    autoExpandMS: 400,
                    onDragStart: function (node) {
                        /** This function MUST be defined to enable dragging for the tree.
                        *  Return false to cancel dragging of node.
                        */
                        return true;
                    },
                    onDragEnter: function (node, sourceNode) {
                        /** sourceNode may be null for non-fancytree droppables.
                        *  Return false to disallow dropping on node. In this case
                        *  onDragOver and onDragLeave are not called.
                        *  Return 'over', 'before, or 'after' to force a hitMode.
                        *  Return ['before', 'after'] to restrict available hitModes.
                        *  Any other return value will calc the hitMode from the cursor position.
                        */
                        // Prevent dropping a parent below another parent (only sort
                        // nodes under the same parent)
                        /* 					if(node.parent !== sourceNode.parent){
                        return false;
                        }
                        // Don't allow dropping *over* a node (would create a child)
                        return ["before", "after"];
                        */

                        return true;
                    },
                    onDrop: function (node, sourceNode, hitMode, ui, draggable) {
                        /** This function MUST be defined to enable dropping of items on
                        *  the tree.
                        */
                        sourceNode.moveTo(node, hitMode);

                        //============================================================
                        //                    var newNode, srcNodes;
                        //                    if (sourceNode)
                        //                    {
                        //						srcNodes = getDropSourceList(sourceNode);
                        //						if( node.tree === sourceNode.tree ) {
                        //							// moving inside this tree -> sorting
                        //							for(i = 0; i < srcNodes.length; i++){
                        //								srcNodes[i].moveTo(node, hitMode);
                        //							}
                        //						}else{
                        //							// inter-tree drag&drop
                        //							for(i = 0; i < srcNodes.length; i++){
                        //								newNode = srcNodes[i].copyTo(node, hitMode, function(n){
                        //                                    // n.title = "Copy of " + n.title;
                        //									n.selected = false;
                        //									n.icon = false;
                        //								});
                        //							}
                        //						}
                        //					}else{
                        //						// dropped a standard draggable (not a tree node)
                        //						var title = ui.helper.html();
                        //						newNode = node.addNode({title: title}, hitMode);
                        //					}
                        //					// If we dropped s.th. on a folder, expand it
                        //					if( newNode && hitMode === "over" ) {
                        //						//node.setExpanded();
                        //						newNode.setActive();
                        //					}
                    }
                },
                activate: function (e, data) {
                    //alert("activate " + data.node);
                },
                //            menu: {
                //                selector: "#myMenu",
                //                position: { my: "center" },
                //                create: function (event, data) {
                //                    $.ui.fancytree.debug("Menu create ", data.$menu);
                //                },
                //                beforeOpen: function (event, data) {
                //                    $.ui.fancytree.debug("Menu beforeOpen ", data.$menu, data.node);
                //                },
                //                open: function (event, data) {
                //                    $.ui.fancytree.debug("Menu open ", data.$menu, data.node);
                //                },
                //                focus: function (event, data) {
                //                    $.ui.fancytree.debug("Menu focus ", data.menuId, data.node);
                //                },
                //                select: function (event, data) {
                //                    alert("Menu select " + data.menuId + ", " + data.node);
                //                },
                //                close: function (event, data) {
                //                    $.ui.fancytree.debug("Menu close ", data.$menu, data.node);
                //                }
                //            },
                select: function (e, data) {
                    // Display list of selected nodes
                    //var s = data.tree.getSelectedNodes().join(", ");
                    //$("#spanSelectionKeys").text(s);


                    var selNodes = data.tree.getSelectedNodes();
                    // convert to title/key array
                    var selKeys = "";
                    selKeys = $.map(selNodes, function (node) {
                        return "[" + node.key + "]: '" + node.title + "'";
                    });
                    $("#spanSelectionKeys").text(selKeys);
                    //$("#spanSelectionKeys").text(selKeys.join(", "));
                },
                dblclick: function (e, data) {
                    data.node.toggleSelected();
                },
                keydown: function (e, data) {
                    if (e.which === 32) {
                        data.node.toggleSelected();
                        return false;
                    }
                }

            });

            $(".sortablelist li").draggable({
                revert: "invalid",
                connectToFancytree: true,
                cursorAt: { top: -5, left: -5 },
                helper: "clone"
            });

            // click event for the highlighting of line items, filtered by modifier key
            $(".sortablelist li").click(function (event) {
                var ctrl = event.ctrlKey || event.altKey || event.metaKey;

                if (ctrl) {
                    //$("#sortablelist").sortable("option", "helper", 'clone');
                    $(this).toggleClass('selected');
                } else {
                    $(this).removeClass('selected');
                    $(this).addClass('selected');
                }
            });

        });
    </script>
</head>
<body>
    <!-- Add a <table> element where the tree should appear: -->
    <div id="tree">
        <ul id="treeData" class="sortablelist" style="display: none;">
            <li id="1" title="1">simple node (no explicit id, so a default key is generated)</li>
            <li id="2" title="2">Define key and tooltip using 'id' and 'title' attributes</li>
            <li id="3" title="3"><span>item2 with <b>html</b> inside a span tag</span></li>
            <li id="4" title="4" class="nolink">this nodes adds class 'nolink', so no tag is generated</li>
            <li id="5"><a href="#">using single a-tag to pass href (this would be clickable even if JavaScript is off)</a></li>
            <li id="6">defining custom node.data.foo = 'bar' using a data-foo attribute</li>
            <li id="7" class="my-extra-class">node with some extra classes (will be added to the generated markup)</li>
            <li id="8" class="folder">
                Folder with some children
                <ul>
                    <li id="9">
                        Sub-item 3.1
                        <ul>
                            <li id="10">Sub-item 3.1.1</li>
                            <li id="11">Sub-item 3.1.2</li>
                        </ul>
                    </li>
                    <li id="12">
                        Sub-item 3.2
                        <ul>
                            <li id="13">Sub-item 3.2.1</li>
                            <li id="14">Sub-item 3.2.2</li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li id="15" class="expanded">
                Document with some children (expanded on init)
                <ul>
                    <li id="16" class="active focus">
                        Sub-item 4.1 (active and focus on init)
                        <ul>
                            <li id="17">Sub-item 4.1.1</li>
                            <li id="18">Sub-item 4.1.2</li>
                        </ul>
                    </li>
                    <li id="19">
                        Sub-item 4.2
                        <ul>
                            <li id="20">Sub-item 4.2.1</li>
                            <li id="21">Sub-item 4.2.2</li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li id="22" class="lazy folder">Lazy loading folder</li>
            <li id="23" class="lazy folder expanded">Lazy loading folder (expand on init)</li>
        </ul>
    </div>
    <div>Selected keys: <span id="spanSelectionKeys">-</span></div>



    <!-- Definition of context menu -->
    <ul id="myMenu" class="contextMenu ui-helper-hidden">
        <li class="edit"><a href="#edit">Edit</a></li>
        <li class="cut"><a href="#cut">Cut</a></li>
        <li class="copy"><a href="#copy">Copy</a></li>
        <li class="paste"><a href="#paste">Paste</a></li>
        <li class="ui-state-disabled"><a href="#delete">Delete</a></li>
        <li>---</li>
        <li class="quit"><a href="#quit">Quit</a></li>
        <li><a href="#save"><span class="ui-icon ui-icon-disk"></span>Save</a></li>
    </ul>


</body>
</html>

