@{
    ViewBag.Title = Html.Raw(Eagle.Resource.LanguageResource.Module);
    //Layout = Eagle.Repository.UI.Layout.LayoutType.FullMainLayout;
}

@section ContentSection
{
    <div id="MainBody">        
        @Html.Partial("../Sys/Modules/_Reset")
    </div>


<link href="~/Scripts/app/plugins/zTree/css/zTreeStyle/zTreeStyle.css" rel="stylesheet" />
<script src="~/Scripts/app/plugins/zTree/js/jquery.ztree.core-3.5.js"></script>

<link href="~/Scripts/plugins/bootstrap-fileinput/fileinput.min.css" rel="stylesheet" />
<script src="~/Scripts/plugins/bootstrap-fileinput/fileinput.min.js"></script>
<link href="~/Scripts/plugins/bootstrap-fileinput/prettify.min.css" rel="stylesheet" />

<link href="~/Scripts/app/plugins/colorpicker/css/evol.colorpicker.min.css" rel="stylesheet" />
<script src="~/Scripts/app/plugins/colorpicker/js/evol.colorpicker.min.js"></script>


<link href="~/Scripts/app/plugins/jRange/jquery.range.css" rel="stylesheet" />
<script src="~/Scripts/app/plugins/jRange/jquery.range.js"></script>


<script type="text/javascript">
    
    (function ($) {
        $.createDataBuilder = function (p) {
            var ModuleMgr = {
                config: {
                    isPostBack: false,
                    async: true,
                    cache: false,
                    processData: false,
                    mimeType: "multipart/form-data",
                    type: 'POST',
                    contentType: "application/json; charset=utf-8",
                    data: '{}',
                    dataType: 'json',
                    baseURL: p.BaseURL,
                    method: "",
                    url: "",
                    ajaxCallMode: 0,
                    isValid: false,
                    mode: 0,
                    key: 0,
                    ContainerClientID: p.ContainerClientID
                },
                messages:
                {
                    nomenu: "No Data"
                },
                init: function (config) {
                    ModuleMgr.InitializeCotrols();
                    ModuleMgr.BindEvents();
                },
                ajaxSuccess: function (data) {
                    if (data.message == "timeout")
                        window.location.reload();
                    else {
                        switch (parseInt(ModuleMgr.config.ajaxCallMode)) {
                            case 0:
                                ModuleMgr.BindList();
                            case 1:
                                ModuleMgr.BindDetails(data);
                                break;
                            case 2:
                                ModuleMgr.ReloadData(data);
                                break;
                        }
                    }
                },
                ajaxFailure: function (jqXHR, textStatus, errorThrown) {
                    handleAjaxErrors(jqXHR, textStatus, errorThrown);
                },
                ajaxCall: function (config) {
                    $.ajax({
                        type: ModuleMgr.config.type,
                        contentType: ModuleMgr.config.contentType,
                        cache: ModuleMgr.config.cache,
                        url: ModuleMgr.config.url,
                        data: ModuleMgr.config.data,
                        dataType: ModuleMgr.config.dataType,
                        success: ModuleMgr.ajaxSuccess,
                        error: ModuleMgr.ajaxFailure,
                        async: false
                    });
                },
                InitializeCotrols: function () {
                    ModuleMgr.LoadContent('@Url.Action("AddNewModule", "Module")', '#pane-1');
                    ModuleMgr.ConfigureSettings();
                    ModuleMgr.LoadTreeList();
                    ModuleMgr.GetModuleList();
                    InvokeDataTables();
                },
                BindEvents: function () {
                    $(document).on('change', '#sPageId', function () {
                        if ($(this).val() != '') 
                            $(this).find("option[value=" + $(this).val() + "]").attr('selected', true).siblings().attr('selected', false);
                        ModuleMgr.GetModuleList();
                    });
                    $('#myTab a').click(function (e) {
                        e.preventDefault()
                        var pageID = $(this).attr("href");
                        var pageUrl = $(this).data("url");
                        //$(pageID).load(pageUrl);
                        ModuleMgr.LoadContent(pageUrl, pageID);
                        $(this).tab('show');
                    });



                    //Add and update post action
                    $(document).on("click", "#btnAdd", function () {
                        if (!$("#myform").valid()) { // Not Valid
                            return false;
                        } else {
                            ModuleMgr.AddData();
                        }
                    });

                    $(document).on("click", "#btnEdit", function () {
                        if (!$("#myform").valid()) { // Not Valid
                            return false;
                        } else {
                            ModuleMgr.UpdateData();
                        }
                    });


                    // Reset form
                    $(document).on("click", "#btnReset", function () {
                        ModuleMgr.ResetControls();
                    });

                    // Click edit (get)
                    $(document).on("click", ".editItem", function () {
                        var ID = $(this).data('id');  // ID cua dong du lieu
                        ModuleMgr.GetDetails(ID);

                        //Go to top
                        $('html, body').animate({ scrollTop: 0 }, 'fast');
                        return false;
                    });

                    // Click delete (get)
                    $(document).on("click", ".deleteItem", function (e) {
                        var ID = $(this).data('id');  // ID cua dong du lieu
                        bootbox.confirm("@Html.Raw(Eagle.Resource.LanguageResource.DoYouWantToContinue)", function (result) {
                            if (result) {
                                ModuleMgr.config.mode = 2;
                                ModuleMgr.DeleteData(ID);
                                return false;
                            }
                        });
                       
                    });

                },
                ConfigureSettings: function () {

                    // Instanciate colorpickers
                    $('.color-picker').colorpicker();

                    ModuleMgr.LoadBorderSlider();

                    //Set UploadFile
                    $("#Icon").fileinput({
                        showPreview: false,
                        showCaption: false,
                        showRemove: false,
                        showUpload: false,
                        //allowedFileExtensions: ["jpg", "gif", "png"],
                        layoutTemplates: {
                            main1: "{preview}\n" +
                            "<div class='input-group {class}'>\n" +
                            "   <div class='input-group-btn'>\n" +
                            "       {browse}\n" +
                            "       {remove}\n" +
                            "   </div>\n" +
                            "   {caption}\n" +
                            "</div>"
                        }
                    });
                },
                BindDetails: function (data) {
                    $('#divEdit').html(data);
                    ModuleMgr.InitializeCotrols();
                },
                LoadBorderSlider:function(){
                    $('.single-slider').jRange({
                        from: 0,
                        to: 10,
                        step: 1,
                        scale: [0,1,2, 3,4, 5,6, 7,8,9, 10],
                        format: '%s',
                        width: 266,
                        showLabels: true
                    });
                },
                LoadContent: function (url, container) {
                    $.ajax({
                        type: "GET",
                        dataType: "html",
                        url: url,
                        success: function (data, statusCode, xhr) {
                            if (data.message == "timeout")
                                window.location.reload();
                            else {
                                $(container).html(data);
                                ModuleMgr.ConfigureSettings();
                            }
                        }, error: function (jqXHR, textStatus, errorThrown) {
                            handleAjaxErrors(jqXHR, textStatus, errorThrown);
                        }
                    });
                },                   
                //BeforeClickOnTree: function (treeId, treeNode) {
                //    var check = (treeNode && !treeNode.isParent);
                //    if (!check) alert("Do not select province...");
                //    return check;
                //},
                OnClickOnTree: function (e, treeId, treeNode) {
                    var zTree = $.fn.zTree.getZTreeObj("tree"),
			        nodes = zTree.getSelectedNodes();
                    $(".inputTree").attr("value", nodes[0].name);
                    $(".hiddenTreeValue").attr("value", nodes[0].id);
                    $(".ztreeContainer").fadeOut("fast");
                },
                OnBodyDown: function (event) {
                    if (!(event.target.id == "selectBtn" || event.target.id == "ztreeContainer" || $(event.target).parents("#ztreeContainer").length > 0)) {
                        $(".ztreeContainer").fadeOut("fast");
                    }
                },
                ShowListBox: function () {
                    var ztreeContainer = $(".ztreeContainer");
                    var inputObj = $(".inputTree");
                    var inputOffset = inputObj.offset();
                    ztreeContainer.css({ left: inputOffset.left + "px", top: inputOffset.top + inputObj.outerHeight() + "px" }).slideDown("fast");
                    $("body").bind("mousedown", ModuleMgr.OnBodyDown);
                },
                LoadTreeList: function () {                   
                    var tree_setting = {
                        view: {
                            dblClickExpand: false,
                            //showLine: true,
                            //selectedMulti: false
                        },
                        data: {
                            simpleData: {
                                enable: true,
                                idKey: "id",
                                pIdKey: "parentId",
                                rootPId: ""
                            }
                        },
                        callback: {
                            //beforeClick: ModuleMgr.BeforeClickOnTree,
                            onClick: ModuleMgr.OnClickOnTree
                        }
                    };


                    $.ajax({
                        async: false,
                        cache: false,
                        type: 'GET',
                        dataType: "json",
                        url: '/Admin/ContentItem/GetListByModule',//The action path making request
                        error: function (jqXHR, textStatus, errorThrown) { //The request failed processing function making
                            handleAjaxErrors(jqXHR, textStatus, errorThrown);
                        },
                        success: function (data) { //Request success post processing function.  
                            $.fn.zTree.init($("#tree"), tree_setting, data);
                        }
                    });
                    $(document).on("click", ".btnInvokeTree", function () {
                        ModuleMgr.ShowListBox();
                    });
                },
                AddData: function () {
                    var data = convertFormToJSON("myform");
                    this.config.method = "Create";
                    this.config.data = data;
                    this.config.url = ModuleMgr.config.baseURL + this.config.method;
                    this.config.ajaxCallMode = 2;
                    this.ajaxCall(this.config);
                },
                GetModuleList: function () {                   
                    var data = { "sPageId": $('#sPageId').val() };
                    this.config.method = "List";
                    $.ajax({
                        async: false,
                        cache: false,
                        type: 'GET',
                        data:data,
                        url: this.config.baseURL + this.config.method,//The action path making request
                        error: function (jqXHR, textStatus, errorThrown) { //The request failed processing function making
                            handleAjaxErrors(jqXHR, textStatus, errorThrown);
                        },
                        success: function (response) { //Request success post processing function.  
                            $('#divList').html(response);
                            //ModuleMgr.InitializeCotrols();
                        }
                    });
                },
                GetDetails: function (id) {
                    ModuleMgr.config.mode = 1;
                    ModuleMgr.config.key = id;

                    var data = { "id": id };
                    this.config.method = "Edit";
                    this.config.data = data;
                    this.config.type = "GET";
                    this.config.dataType = "html";
                    this.config.url = this.config.baseURL + this.config.method;
                    this.config.ajaxCallMode = 1;
                    this.ajaxCall(this.config);
                },
                UpdateData: function () {
                    var data = convertFormToJSON("myform");
                    this.config.method = "Edit";
                    this.config.type = "POST";
                    this.config.dataType = "json";
                    this.config.data = data;
                    this.config.url = ModuleMgr.config.baseURL + this.config.method;
                    this.config.ajaxCallMode = 2;
                    this.ajaxCall(this.config);
                },
                DeleteData: function (ID) {
                    this.config.method = "Delete";
                    this.config.type = "POST";
                    this.config.data = JSON.stringify({ "id": ID });
                    this.config.url = ModuleMgr.config.baseURL + this.config.method + "/" + ID;
                    this.config.ajaxCallMode = 2;
                    this.ajaxCall(this.config);
                },
                ReloadData: function (data) {
                    var mode = ModuleMgr.config.mode;
                    var titleSuccess = "", titleFailure = "", titleAjaxError = "";
                    titleAjaxError = "@Eagle.Resource.LanguageResource.Error";
                    if (mode == 0) {
                        titleSuccess = "@Eagle.Resource.LanguageResource.CreateSuccess";
                        titleFailure = "@Eagle.Resource.LanguageResource.CreateFailure";
                    }
                    else if (mode == 1) {
                        titleSuccess = "@Eagle.Resource.LanguageResource.UpdateSuccess";
                        titleFailure = "@Eagle.Resource.LanguageResource.UpdateFailure";
                    } else if (mode == 2) {
                        titleSuccess = "@Eagle.Resource.LanguageResource.DeleteSuccess";
                        titleFailure = "@Eagle.Resource.LanguageResource.DeleteFailure";
                    } else {
                        titleSuccess = "@Eagle.Resource.LanguageResource.UpdateSuccess";
                        titleFailure = "@Eagle.Resource.LanguageResource.UpdateFailure";
                    }

                    var result = JSON.parse(data);
                    if (result.flag == 'true') {
                        //Reload page after success
                        this.config.method = "Index";
                        $.ajax({
                            type: "GET",
                            url: ModuleMgr.config.baseURL + this.config.method,
                            success: function (data, statusCode, xhr) {
                                if (data.message == "timeout") {
                                    window.location.reload();
                                } else {
                                    $('#' + ModuleMgr.config.ContainerClientID).html(data);
                                    ModuleMgr.InitializeCotrols();
                                    showMessageWithTitle(titleSuccess, result.message, "success", 20000);
                                }
                            }, error: function (jqXHR, textStatus, errorThrown) {
                                handleAjaxErrors(jqXHR, textStatus, errorThrown);
                            }
                        });
                    } else {
                        showMessageWithTitle(titleFailure, result.message, "error");
                        hideMessageWithTitle(20000);
                    }
                },
                ResetControls: function () {
                    var mode = ModuleMgr.config.mode;
                    if (mode == 0) {
                        var validateObj = $('#myform');
                        validateObj.find('input:text, input:password, input:file, select, textarea').not('.ignored').val('');
                        validateObj.find('input:radio, input:checkbox').removeAttr('checked').removeAttr('selected');
                        validateObj.find('input[type="number"]').val(0);
                        validateObj.find('select').find('option:first').attr('selected', true).siblings().attr('selected', false);
                        validateObj.find("[data-valmsg-summary=true]").removeClass("validation-summary-errors").addClass("validation-summary-valid").find("ul").empty();
                        validateObj.find("[data-valmsg-replace]").removeClass("field-validation-error").addClass("field-validation-valid").empty();
                    } else {
                        var key = ModuleMgr.config.key;
                        ModuleMgr.GetDetails(key);
                    }
                    ModuleMgr.InitializeCotrols();
                },
            };
            ModuleMgr.init();
        }

        var Controller = 'Module';
        var BaseURL = areas + "/" + Controller + "/";
        var base_settings = {
            ContainerClientID: "MainBody",
            BaseURL: BaseURL
        };
        $.createDataBuilder(base_settings);
    })(jQuery);
</script>
}
