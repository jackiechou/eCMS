@model DelegateViewModel

<form id="frmAdd" class="form-horizontal">
    @Html.HiddenFor(model => model.DelegateID)
    <div id="alertMessageBox">
        @if (ViewBag.DisplayErrorMessage == true)
        {
            <div class="@ViewBag.CssClass">
                <a href="#" class="close" data-dismiss="alert">&times;</a>
                <strong>@ViewBag.SortMessage !</strong>
                <div class="padding-left">
                    @Html.Raw(Server.HtmlDecode(ViewBag.Message))
                </div>
            </div>
        }
    </div>
    <div class="box">
        <div class="row">
            <div id="right_accordion" class="accordion-group">
                <div class="accordion-heading toolbar">
                    <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#form_accordion">
                        <span class="pull-right"><i class="icon-chevron-up icon-white"></i></span>
                        <span class="heading-tite">@Eagle.Resource.LanguageResource.InputArea</span>
                    </a>
                </div>
                <div id="form_accordion" class="accordion-body collapse in">
                    <div class="accordion-inner">
                        <div class="accordion-content">

                            <div class="row">
                                <div class="col-md-2">
                                    @Html.RequiredLabelFor(model => model.DMQuiTrinhID)
                                </div>
                                <div class="col-md-4">
                                    @Html.DropDownListFor(model => model.DMQuiTrinhID, null, new { @class = "form-control"  })
                                    @Html.ValidationMessageFor(model => model.DMQuiTrinhID)
                                </div>
                                <div class="col-md-2">
                                </div>
                                <div class="col-md-4">
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.Account)
                                </div>
                                <div class="col-md-4">     
                                    @Html.Label("acc", Model.Account, new { @class = "reset-label" })
                                    @Html.HiddenFor(model => model.Account)
                                </div>
                                <div class="col-md-2">
                                    @Html.RequiredLabelFor(model => model.Account_delegate)
                                </div>
                                <div class="col-md-4">
                                    <input type="text" value="@Model.Account_delegate" id="Account_delegate" name="Account_delegate" class="col-md-12" />
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-2">
                                    @Html.RequiredLabelFor(model => model.FromDateNullable)
                                </div>
                                <div class="col-md-4">
                                    @Html.DatepickerFor(model => model.FromDateNullable)
                                    @Html.ValidationMessageFor(model => model.FromDateNullable)
                                </div>
                                <div class="col-md-2">
                                    @Html.RequiredLabelFor(model => model.ToDateNullable)
                                </div>
                                <div class="col-md-4">
                                    @Html.DatepickerFor(model => model.ToDateNullable)
                                    @Html.ValidationMessageFor(model => model.ToDateNullabletmp)
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.Note)
                                </div>
                                <div class="col-md-10">
                                    @Html.TextBoxFor(model => model.Note, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Note)
                                </div>
                            </div>
                            <!--/row-->
                            <div class="row">
                                <div class="footbar">
                                    <input type="button" id="btnReset" value="@Eagle.Resource.LanguageResource.btnReset" class="btn" />
                                    <input type="button" id="btnAdd" value="@Eagle.Resource.LanguageResource.btnSave" class="btn btn-info AddModel" />
                                </div>
                            </div>
                            <!--End.row-->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>
@Html.Action("jqueryval", "Common", null)

<script>
    InvokeDateTimePicker();
    AutocompleteCompany();
    function AutocompleteCompany() {
        //The url we will send our get request to
        var requestUrl = '@Url.Action("DropdownList", "Delegate", null)';
            var pageSize = 20;
            var selectBox = $('#Account_delegate');
            selectBox.select2({
                placeholder: 'Input Username',
                minimumInputLength: 0,
                allowClear: true,
                ajax: {
                    url: requestUrl,
                    dataType: 'json',
                    quietMillis: 100,  //How long the user has to pause their typing before sending the next request
                    data: function (term, page) {
                        return {
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term
                        };
                    },
                    results: function (data, page) {
                        //Used to determine whether or not there are more results available,
                        //and if requests for more data should be sent in the infinite scrolling                    
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    }
                },
                formatSelection: function (result) {
                    return result.name;
                },
                formatResult: function (result) {
                    return result.name;
                },
                initSelection: function (element, callback) {
                    var selected_value = $('#CompanyId').val();
                    var data = { id: element.val(), name: element.val() };
                    callback(data);
                    $('input#CompanyId').val(selected_value);
                }
            });
        }
</script>

